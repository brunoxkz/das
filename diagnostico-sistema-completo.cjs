#!/usr/bin/env node

/**
 * DIAGN√ìSTICO COMPLETO DO SISTEMA VENDZZ
 * Identifica problemas espec√≠ficos e sugere corre√ß√µes
 */

const fetch = require('node-fetch');
const API_BASE = 'http://localhost:5000';

console.log('üîç DIAGN√ìSTICO COMPLETO DO SISTEMA VENDZZ');

async function makeRequest(endpoint, options = {}) {
  try {
    const response = await fetch(`${API_BASE}${endpoint}`, {
      headers: {
        'Content-Type': 'application/json',
        ...options.headers
      },
      ...options
    });
    
    const text = await response.text();
    let data;
    try {
      data = JSON.parse(text);
    } catch {
      data = { rawResponse: text };
    }
    
    return { status: response.status, data, ok: response.ok, headers: response.headers };
  } catch (error) {
    return { status: 500, data: { error: error.message }, ok: false };
  }
}

async function runDiagnostics() {
  console.log('\nüè• INICIANDO DIAGN√ìSTICOS...\n');
  
  // === TESTE 1: AUTENTICA√á√ÉO ===
  console.log('1Ô∏è‚É£ TESTE DE AUTENTICA√á√ÉO');
  console.log('========================');
  
  const loginResult = await makeRequest('/api/auth/login', {
    method: 'POST',
    body: JSON.stringify({
      email: 'admin@admin.com',
      password: 'admin123'
    })
  });
  
  if (loginResult.ok) {
    console.log('‚úÖ Autentica√ß√£o: FUNCIONANDO');
    console.log(`üìã Token gerado: ${loginResult.data.token ? 'SIM' : 'N√ÉO'}`);
    console.log(`üìã AccessToken gerado: ${loginResult.data.accessToken ? 'SIM' : 'N√ÉO'}`);
    console.log(`üìã Response completa:`, JSON.stringify(loginResult.data, null, 2));
  } else {
    console.log('‚ùå Autentica√ß√£o: FALHANDO');
    console.log(`üìã Erro: ${loginResult.data.error || 'Desconhecido'}`);
    console.log('üîß CORRE√á√ÉO: Verificar credenciais admin ou JWT_SECRET');
    return;
  }
  
  const token = loginResult.data.token || loginResult.data.accessToken;
  
  // === TESTE 2: ENDPOINTS PROTEGIDOS ===
  console.log('\n2Ô∏è‚É£ TESTE DE ENDPOINTS PROTEGIDOS');
  console.log('==================================');
  
  const protectedEndpoints = [
    '/api/quizzes/RdAUwmQgTthxbZLA0HJWu/leads',
    '/api/quizzes/RdAUwmQgTthxbZLA0HJWu/phones',
    '/api/quizzes/RdAUwmQgTthxbZLA0HJWu/variables-ultra'
  ];
  
  for (const endpoint of protectedEndpoints) {
    const result = await makeRequest(endpoint, {
      headers: { 'Authorization': `Bearer ${token}` }
    });
    
    console.log(`${result.ok ? '‚úÖ' : '‚ùå'} ${endpoint}: ${result.status}`);
    
    if (!result.ok) {
      console.log(`   üìã Erro: ${result.data.error || result.data.message || 'Desconhecido'}`);
      
      if (result.status === 401) {
        console.log('   üîß CORRE√á√ÉO: Problema com middleware JWT ou token inv√°lido');
      } else if (result.status === 404) {
        console.log('   üîß CORRE√á√ÉO: Quiz n√£o existe ou endpoint incorreto');
      } else if (result.status === 500) {
        console.log('   üîß CORRE√á√ÉO: Erro interno do servidor - verificar logs');
      }
    }
  }
  
  // === TESTE 3: SISTEMA DE CR√âDITOS ===
  console.log('\n3Ô∏è‚É£ TESTE DO SISTEMA DE CR√âDITOS');
  console.log('================================');
  
  const creditsResult = await makeRequest('/api/sms-credits/balance', {
    headers: { 'Authorization': `Bearer ${token}` }
  });
  
  if (creditsResult.ok) {
    console.log('‚úÖ Sistema de cr√©ditos: FUNCIONANDO');
    console.log(`üìã Saldo SMS: ${creditsResult.data.smsCredits || 0}`);
    console.log(`üìã Saldo WhatsApp: ${creditsResult.data.whatsappCredits || 0}`);
    console.log(`üìã Saldo Email: ${creditsResult.data.emailCredits || 0}`);
    
    if (creditsResult.data.smsCredits === 0) {
      console.log('‚ö†Ô∏è AVISO: Sem cr√©ditos SMS - campanhas n√£o enviar√£o');
    }
  } else {
    console.log('‚ùå Sistema de cr√©ditos: FALHANDO');
    console.log('üîß CORRE√á√ÉO: Verificar tabela credits e implementa√ß√£o');
  }
  
  // === TESTE 4: CAMPANHAS WHATSAPP ===
  console.log('\n4Ô∏è‚É£ TESTE DE CAMPANHAS WHATSAPP');
  console.log('===============================');
  
  const campaignsResult = await makeRequest('/api/whatsapp-campaigns', {
    headers: { 'Authorization': `Bearer ${token}` }
  });
  
  if (campaignsResult.ok) {
    const campaigns = campaignsResult.data.campaigns || [];
    console.log(`‚úÖ Campanhas WhatsApp: ${campaigns.length} encontradas`);
    
    const activeCampaigns = campaigns.filter(c => c.status === 'active');
    console.log(`üìã Campanhas ativas: ${activeCampaigns.length}`);
    
    if (activeCampaigns.length > 0) {
      console.log('üìã Primeira campanha ativa:', {
        id: activeCampaigns[0].id,
        phoneCount: activeCampaigns[0].phoneCount || 'N/A',
        message: activeCampaigns[0].message?.substring(0, 50) + '...'
      });
    }
    
    if (campaigns.length > 0 && campaigns.every(c => c.sentCount === 0)) {
      console.log('‚ö†Ô∏è PROBLEMA: Campanhas criadas mas nenhuma mensagem enviada');
      console.log('üîß POSS√çVEIS CAUSAS:');
      console.log('   - API WhatsApp n√£o configurada');
      console.log('   - Telefones em formato inv√°lido');
      console.log('   - Rate limiting muito restritivo');
      console.log('   - Sistema de cr√©ditos bloqueando');
    }
  } else {
    console.log('‚ùå Campanhas WhatsApp: ERRO AO ACESSAR');
  }
  
  // === TESTE 5: VALIDA√á√ÉO DE TELEFONES ===
  console.log('\n5Ô∏è‚É£ TESTE DE VALIDA√á√ÉO DE TELEFONES');
  console.log('===================================');
  
  const phonesResult = await makeRequest('/api/quizzes/RdAUwmQgTthxbZLA0HJWu/phones', {
    headers: { 'Authorization': `Bearer ${token}` }
  });
  
  if (phonesResult.ok) {
    const phones = phonesResult.data.phones || [];
    console.log(`‚úÖ Telefones extra√≠dos: ${phones.length}`);
    
    if (phones.length > 0) {
      // An√°lise de formatos
      const phoneFormats = phones.map(p => ({
        original: p.phone,
        cleaned: p.phone?.replace(/\D/g, ''),
        length: p.phone?.replace(/\D/g, '').length,
        valid: p.phone?.replace(/\D/g, '').length >= 8 && p.phone?.replace(/\D/g, '').length <= 15
      }));
      
      const validPhones = phoneFormats.filter(p => p.valid);
      console.log(`üìã Telefones v√°lidos: ${validPhones.length}/${phones.length}`);
      console.log(`üìã Exemplo de telefone: ${phoneFormats[0]?.original} ‚Üí ${phoneFormats[0]?.cleaned}`);
      
      if (validPhones.length === 0) {
        console.log('‚ö†Ô∏è PROBLEMA: Nenhum telefone em formato v√°lido');
        console.log('üîß CORRE√á√ÉO: Revisar regex de valida√ß√£o ou formato dos dados');
      }
    } else {
      console.log('‚ö†Ô∏è PROBLEMA: Nenhum telefone extra√≠do do quiz');
      console.log('üîß CORRE√á√ÉO: Verificar fun√ß√£o extractLeadDataFromResponses');
    }
  }
  
  // === TESTE 6: CONFIGURA√á√ïES DO SISTEMA ===
  console.log('\n6Ô∏è‚É£ TESTE DE CONFIGURA√á√ïES');
  console.log('==========================');
  
  // Verificar se vari√°veis de ambiente cr√≠ticas existem
  const envVars = [
    'JWT_SECRET',
    'JWT_REFRESH_SECRET',
    'TWILIO_ACCOUNT_SID',
    'TWILIO_AUTH_TOKEN',
    'OPENAI_API_KEY'
  ];
  
  console.log('üìã Vari√°veis de ambiente:');
  // Nota: N√£o podemos acessar process.env do cliente, mas podemos inferir pelos erros
  
  // === RESUMO DIAGN√ìSTICO ===
  console.log('\nüìä RESUMO DO DIAGN√ìSTICO');
  console.log('========================');
  console.log('‚úÖ Autentica√ß√£o funcionando');
  console.log('‚ö†Ô∏è Poss√≠veis problemas identificados:');
  console.log('   1. Campanhas WhatsApp com 0 envios');
  console.log('   2. Poss√≠vel falta de cr√©ditos');
  console.log('   3. Valida√ß√£o de telefones muito restritiva');
  console.log('   4. API WhatsApp pode n√£o estar configurada');
  console.log('\nüîß PR√ìXIMOS PASSOS RECOMENDADOS:');
  console.log('   1. Verificar configura√ß√£o Twilio/WhatsApp API');
  console.log('   2. Adicionar cr√©ditos ao sistema');
  console.log('   3. Testar valida√ß√£o de telefones com dados reais');
  console.log('   4. Implementar logs mais detalhados nos envios');
}

runDiagnostics().catch(console.error);