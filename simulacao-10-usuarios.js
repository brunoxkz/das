/**
 * SIMULA√á√ÉO DE 10 USU√ÅRIOS SIMULT√ÇNEOS - TESTE DE STRESS 10 MINUTOS
 * Cada usu√°rio simula um fluxo diferente para identificar erros
 */

const BASE_URL = 'http://localhost:5000';
const ADMIN_CREDENTIALS = {
  email: 'admin@vendzz.com',
  password: 'admin123'
};

// Dados simulados para diferentes usu√°rios
const USUARIOS_SIMULADOS = [
  {
    id: 1,
    nome: 'Ana Marketing',
    email: 'ana.marketing@teste.com',
    scenario: 'criacao_quiz_completo',
    atividades: ['login', 'criar_quiz', 'personalizar_design', 'criar_campanha_sms', 'monitorar_analytics']
  },
  {
    id: 2,
    nome: 'Bruno Vendas',
    email: 'bruno.vendas@teste.com',
    scenario: 'campanha_email_massiva',
    atividades: ['login', 'criar_campanha_email', 'segmentar_audiencia', 'agendar_envio', 'verificar_resultados']
  },
  {
    id: 3,
    nome: 'Carla WhatsApp',
    email: 'carla.whatsapp@teste.com',
    scenario: 'automacao_whatsapp',
    atividades: ['login', 'configurar_whatsapp', 'criar_fluxo_automacao', 'testar_envio', 'otimizar_mensagens']
  },
  {
    id: 4,
    nome: 'Daniel Analytics',
    email: 'daniel.analytics@teste.com',
    scenario: 'analise_profunda',
    atividades: ['login', 'acessar_dashboard', 'analisar_conversoes', 'exportar_dados', 'criar_relatorios']
  },
  {
    id: 5,
    nome: 'Eduarda Quiz',
    email: 'eduarda.quiz@teste.com',
    scenario: 'responder_quiz_publico',
    atividades: ['acessar_quiz_publico', 'responder_questoes', 'submeter_respostas', 'verificar_redirecionamento']
  },
  {
    id: 6,
    nome: 'Felipe Admin',
    email: 'felipe.admin@teste.com',
    scenario: 'gerenciamento_usuarios',
    atividades: ['login', 'acessar_admin', 'gerenciar_usuarios', 'enviar_notificacoes', 'monitorar_sistema']
  },
  {
    id: 7,
    nome: 'Gabriela Creditos',
    email: 'gabriela.creditos@teste.com',
    scenario: 'gestao_creditos',
    atividades: ['login', 'verificar_creditos', 'comprar_creditos', 'usar_creditos_sms', 'acompanhar_gastos']
  },
  {
    id: 8,
    nome: 'Henrique Mobile',
    email: 'henrique.mobile@teste.com',
    scenario: 'acesso_mobile',
    atividades: ['login_mobile', 'criar_quiz_mobile', 'responder_quiz_mobile', 'verificar_responsividade']
  },
  {
    id: 9,
    nome: 'Isabela Integracao',
    email: 'isabela.integracao@teste.com',
    scenario: 'integracao_apis',
    atividades: ['login', 'configurar_pixels', 'testar_webhooks', 'validar_integracao', 'monitorar_erros']
  },
  {
    id: 10,
    nome: 'Jo√£o Stress',
    email: 'joao.stress@teste.com',
    scenario: 'stress_test_rapido',
    atividades: ['login_multiplo', 'criar_quiz_rapido', 'enviar_sms_massa', 'sobrecarregar_sistema']
  }
];

// Contadores de erros
const errorCounts = {
  total: 0,
  byUser: {},
  byType: {},
  byEndpoint: {}
};

// Fun√ß√£o para fazer requisi√ß√µes HTTP
async function makeRequest(endpoint, options = {}) {
  const startTime = Date.now();
  try {
    const response = await fetch(`${BASE_URL}${endpoint}`, {
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers
      }
    });
    
    const duration = Date.now() - startTime;
    
    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`);
    }
    
    const data = await response.json();
    console.log(`‚úÖ ${endpoint} - ${response.status} - ${duration}ms`);
    return data;
  } catch (error) {
    const duration = Date.now() - startTime;
    console.error(`‚ùå ${endpoint} - ERROR - ${duration}ms - ${error.message}`);
    recordError(null, endpoint, error);
    throw error;
  }
}

// Fun√ß√£o para autenticar usu√°rio
async function authenticate(userId) {
  try {
    const response = await makeRequest('/api/auth/login', {
      method: 'POST',
      body: JSON.stringify(ADMIN_CREDENTIALS)
    });
    
    if (response.token) {
      console.log(`üîê User ${userId} autenticado com sucesso`);
      return response.token;
    }
    throw new Error('Token n√£o recebido');
  } catch (error) {
    recordError(userId, 'authentication', error);
    throw error;
  }
}

// Fun√ß√£o para criar quiz
async function createQuiz(userId, token) {
  try {
    const quizData = {
      title: `Quiz Teste User ${userId} - ${Date.now()}`,
      description: `Quiz criado pelo usu√°rio ${userId} para teste de stress`,
      structure: {
        pages: [
          {
            id: 'page1',
            name: 'P√°gina 1',
            elements: [
              {
                id: 'heading1',
                type: 'heading',
                question: `Bem-vindo ao Quiz do User ${userId}`,
                properties: { size: 'h1', alignment: 'center' }
              },
              {
                id: 'nome1',
                type: 'text',
                question: 'Qual seu nome?',
                required: true,
                fieldId: 'nome_completo'
              },
              {
                id: 'email1',
                type: 'email',
                question: 'Qual seu email?',
                required: true,
                fieldId: 'email_contato'
              }
            ]
          }
        ]
      }
    };
    
    const response = await makeRequest('/api/quizzes', {
      method: 'POST',
      headers: { 'Authorization': `Bearer ${token}` },
      body: JSON.stringify(quizData)
    });
    
    console.log(`üìù User ${userId} criou quiz: ${response.id}`);
    return response;
  } catch (error) {
    recordError(userId, 'create_quiz', error);
    throw error;
  }
}

// Fun√ß√£o para criar campanha SMS
async function createSMSCampaign(userId, token) {
  try {
    // Primeiro, buscar quizzes do usu√°rio
    const quizzes = await makeRequest('/api/quizzes', {
      method: 'GET',
      headers: { 'Authorization': `Bearer ${token}` }
    });
    
    if (quizzes.length === 0) {
      throw new Error('Nenhum quiz encontrado para criar campanha');
    }
    
    const campaignData = {
      name: `SMS Campaign User ${userId} - ${Date.now()}`,
      quizId: quizzes[0].id,
      message: `Ol√° {nome_completo}! Mensagem do usu√°rio ${userId}. Seu email: {email_contato}`,
      targetAudience: 'all',
      triggerType: 'immediate'
    };
    
    const response = await makeRequest('/api/sms-campaigns', {
      method: 'POST',
      headers: { 'Authorization': `Bearer ${token}` },
      body: JSON.stringify(campaignData)
    });
    
    console.log(`üì± User ${userId} criou campanha SMS: ${response.id}`);
    return response;
  } catch (error) {
    recordError(userId, 'create_sms_campaign', error);
    throw error;
  }
}

// Fun√ß√£o para acessar dashboard
async function viewDashboard(userId, token) {
  try {
    const dashboardData = await makeRequest('/api/dashboard/stats', {
      method: 'GET',
      headers: { 'Authorization': `Bearer ${token}` }
    });
    
    console.log(`üìä User ${userId} acessou dashboard - ${dashboardData.quizzes?.length || 0} quizzes`);
    return dashboardData;
  } catch (error) {
    recordError(userId, 'view_dashboard', error);
    throw error;
  }
}

// Fun√ß√£o para responder quiz p√∫blico
async function respondQuiz(userId) {
  try {
    // Buscar um quiz p√∫blico para responder
    const quizzes = await makeRequest('/api/quizzes', {
      method: 'GET'
    });
    
    if (quizzes.length === 0) {
      throw new Error('Nenhum quiz p√∫blico encontrado');
    }
    
    const quiz = quizzes[0];
    const responseData = {
      quizId: quiz.id,
      responses: [
        {
          elementId: 'nome1',
          elementType: 'text',
          elementFieldId: 'nome_completo',
          answer: `Usu√°rio Teste ${userId}`
        },
        {
          elementId: 'email1',
          elementType: 'email',
          elementFieldId: 'email_contato',
          answer: `user${userId}@teste.com`
        }
      ],
      metadata: {
        isComplete: true,
        isPartial: false,
        completionPercentage: 100
      }
    };
    
    const response = await makeRequest('/api/quiz-responses', {
      method: 'POST',
      body: JSON.stringify(responseData)
    });
    
    console.log(`üìù User ${userId} respondeu quiz: ${response.id}`);
    return response;
  } catch (error) {
    recordError(userId, 'respond_quiz', error);
    throw error;
  }
}

// Fun√ß√£o para gravar erro
function recordError(userId, action, error) {
  errorCounts.total++;
  
  if (userId) {
    errorCounts.byUser[userId] = (errorCounts.byUser[userId] || 0) + 1;
  }
  
  errorCounts.byType[action] = (errorCounts.byType[action] || 0) + 1;
  
  console.error(`üö® ERRO - User: ${userId}, Action: ${action}, Error: ${error.message}`);
}

// Fun√ß√£o para simular um usu√°rio espec√≠fico
async function simulateUser(scenario) {
  const { id, nome, scenario: userScenario, atividades } = scenario;
  
  console.log(`üöÄ Iniciando simula√ß√£o - User ${id}: ${nome} (${userScenario})`);
  
  let token = null;
  const userErrors = [];
  
  try {
    // Autentica√ß√£o
    if (atividades.includes('login') || atividades.includes('login_mobile') || atividades.includes('login_multiplo')) {
      token = await authenticate(id);
      await new Promise(resolve => setTimeout(resolve, 100)); // Delay entre a√ß√µes
    }
    
    // Executar atividades espec√≠ficas do usu√°rio
    for (const atividade of atividades) {
      try {
        switch (atividade) {
          case 'criar_quiz':
          case 'criar_quiz_rapido':
            if (token) await createQuiz(id, token);
            break;
            
          case 'criar_campanha_sms':
          case 'enviar_sms_massa':
            if (token) await createSMSCampaign(id, token);
            break;
            
          case 'acessar_dashboard':
            if (token) await viewDashboard(id, token);
            break;
            
          case 'responder_questoes':
          case 'responder_quiz_mobile':
            await respondQuiz(id);
            break;
            
          case 'verificar_creditos':
            if (token) {
              await makeRequest('/api/user/credits', {
                method: 'GET',
                headers: { 'Authorization': `Bearer ${token}` }
              });
            }
            break;
            
          case 'acessar_admin':
            if (token) {
              await makeRequest('/api/admin/users', {
                method: 'GET',
                headers: { 'Authorization': `Bearer ${token}` }
              });
            }
            break;
            
          default:
            console.log(`‚è≠Ô∏è User ${id} - Atividade ${atividade} simulada`);
        }
        
        // Delay entre a√ß√µes para simular uso real
        await new Promise(resolve => setTimeout(resolve, Math.random() * 200 + 100));
        
      } catch (error) {
        userErrors.push({ atividade, error: error.message });
      }
    }
    
  } catch (error) {
    userErrors.push({ atividade: 'setup', error: error.message });
  }
  
  if (userErrors.length > 0) {
    console.log(`‚ùå User ${id} completou com ${userErrors.length} erros:`, userErrors);
  } else {
    console.log(`‚úÖ User ${id} completou sem erros`);
  }
  
  return userErrors;
}

// Fun√ß√£o principal para executar simula√ß√£o
async function runSimulation() {
  console.log('üéØ INICIANDO SIMULA√á√ÉO DE 10 USU√ÅRIOS SIMULT√ÇNEOS');
  console.log('‚è±Ô∏è Tempo estimado: 10 minutos');
  console.log('üîç Objetivo: Identificar erros potenciais sob stress');
  console.log('=' .repeat(60));
  
  const startTime = Date.now();
  
  // Executar todos os usu√°rios simultaneamente
  const userPromises = USUARIOS_SIMULADOS.map(usuario => simulateUser(usuario));
  
  try {
    const results = await Promise.allSettled(userPromises);
    
    const duration = Date.now() - startTime;
    
    console.log('=' .repeat(60));
    console.log('üìä RELAT√ìRIO FINAL DA SIMULA√á√ÉO');
    console.log(`‚è±Ô∏è Tempo total: ${(duration / 1000).toFixed(2)}s`);
    console.log(`‚ùå Total de erros: ${errorCounts.total}`);
    
    // Relat√≥rio por usu√°rio
    console.log('\nüë• ERROS POR USU√ÅRIO:');
    Object.entries(errorCounts.byUser).forEach(([userId, count]) => {
      console.log(`  User ${userId}: ${count} erro(s)`);
    });
    
    // Relat√≥rio por tipo de erro
    console.log('\nüîç ERROS POR TIPO:');
    Object.entries(errorCounts.byType).forEach(([type, count]) => {
      console.log(`  ${type}: ${count} erro(s)`);
    });
    
    // Resultado por usu√°rio
    console.log('\nüìã RESULTADOS DETALHADOS:');
    results.forEach((result, index) => {
      const usuario = USUARIOS_SIMULADOS[index];
      if (result.status === 'fulfilled') {
        const errors = result.value;
        console.log(`  ${usuario.nome} (${usuario.scenario}): ${errors.length === 0 ? '‚úÖ SUCESSO' : `‚ùå ${errors.length} erro(s)`}`);
      } else {
        console.log(`  ${usuario.nome} (${usuario.scenario}): ‚ùå FALHA CR√çTICA`);
      }
    });
    
    // Recomenda√ß√µes
    console.log('\nüí° RECOMENDA√á√ïES:');
    if (errorCounts.total === 0) {
      console.log('  üéâ Sistema passou em todos os testes! Excelente estabilidade.');
    } else if (errorCounts.total <= 5) {
      console.log('  ‚ö†Ô∏è Poucos erros detectados. Monitorar √°reas espec√≠ficas.');
    } else {
      console.log('  üö® M√∫ltiplos erros detectados. Requer aten√ß√£o imediata.');
    }
    
  } catch (error) {
    console.error('üö® ERRO CR√çTICO NA SIMULA√á√ÉO:', error);
  }
}

// Executar simula√ß√£o
runSimulation().catch(console.error);