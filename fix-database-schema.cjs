const Database = require('better-sqlite3');
const path = require('path');

// Conectar com o banco de dados
const db = new Database(path.join(__dirname, 'vendzz-database.db'));

console.log('üîß Corrigindo schema do banco de dados...');

// Verificar se a coluna trialExpiresAt existe
try {
  const tableInfo = db.prepare("PRAGMA table_info(users)").all();
  console.log('Colunas da tabela users:', tableInfo.map(col => col.name));
  
  const hasTrialExpiresAt = tableInfo.some(col => col.name === 'trialExpiresAt');
  
  if (!hasTrialExpiresAt) {
    console.log('‚ùå Coluna trialExpiresAt n√£o encontrada. Adicionando...');
    
    // Adicionar coluna trialExpiresAt
    db.prepare("ALTER TABLE users ADD COLUMN trialExpiresAt INTEGER").run();
    console.log('‚úÖ Coluna trialExpiresAt adicionada');
  } else {
    console.log('‚úÖ Coluna trialExpiresAt j√° existe');
  }
  
  // Verificar outras colunas do sistema de planos
  const planColumns = ['planExpiresAt', 'planRenewalRequired', 'subscriptionStatus'];
  
  for (const columnName of planColumns) {
    const hasColumn = tableInfo.some(col => col.name === columnName);
    
    if (!hasColumn) {
      console.log(`‚ùå Coluna ${columnName} n√£o encontrada. Adicionando...`);
      
      if (columnName === 'planExpiresAt') {
        db.prepare(`ALTER TABLE users ADD COLUMN ${columnName} INTEGER`).run();
      } else if (columnName === 'planRenewalRequired') {
        db.prepare(`ALTER TABLE users ADD COLUMN ${columnName} INTEGER DEFAULT 0`).run();
      } else if (columnName === 'subscriptionStatus') {
        db.prepare(`ALTER TABLE users ADD COLUMN ${columnName} TEXT DEFAULT 'active'`).run();
      }
      
      console.log(`‚úÖ Coluna ${columnName} adicionada`);
    } else {
      console.log(`‚úÖ Coluna ${columnName} j√° existe`);
    }
  }
  
  // Criar usu√°rio admin padr√£o se n√£o existir
  const adminUser = db.prepare("SELECT * FROM users WHERE email = ?").get('admin@admin.com');
  
  if (!adminUser) {
    console.log('üë§ Criando usu√°rio admin padr√£o...');
    
    const bcrypt = require('bcryptjs');
    const hashedPassword = bcrypt.hashSync('admin123', 10);
    
    db.prepare(`
      INSERT INTO users (id, email, password, firstName, lastName, plan, role, subscriptionStatus, smsCredits, emailCredits, whatsappCredits, aiCredits, createdAt, updatedAt)
      VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
    `).run(
      'admin-user-id',
      'admin@admin.com',
      hashedPassword,
      'Admin',
      'User',
      'enterprise',
      'admin',
      'active',
      10000,
      10000,
      10000,
      1000,
      Date.now(),
      Date.now()
    );
    
    console.log('‚úÖ Usu√°rio admin criado com sucesso');
  } else {
    console.log('‚úÖ Usu√°rio admin j√° existe');
  }
  
  console.log('üéØ Schema do banco de dados corrigido com sucesso!');
  
} catch (error) {
  console.error('‚ùå Erro ao corrigir schema:', error);
} finally {
  db.close();
}