#!/usr/bin/env node

/**
 * TESTE COMPLETO DO SISTEMA ANTI-BURLA DE CR√âDITOS
 * 
 * Este script testa:
 * 1. Sistema de prote√ß√£o anti-burla (credit-protection.ts)
 * 2. Integra√ß√£o com Stripe (stripe-integration.ts)
 * 3. Valida√ß√£o de cr√©ditos em endpoints cr√≠ticos
 * 4. Logs de transa√ß√µes e auditoria
 * 5. Rate limiting e detec√ß√£o de fraude
 */

import jwt from 'jsonwebtoken';
import fetch from 'node-fetch';

const JWT_SECRET = process.env.JWT_SECRET || 'sua-chave-secreta-aqui';
const BASE_URL = 'http://localhost:5000';

// Fun√ß√£o para gerar token JWT
function generateToken(userId) {
  return jwt.sign(
    { 
      userId,
      id: userId,
      email: 'teste@teste.com',
      role: 'user'
    }, 
    JWT_SECRET, 
    { expiresIn: '1h' }
  );
}

// Fun√ß√£o para fazer requisi√ß√£o autenticada
async function makeRequest(endpoint, options = {}) {
  const token = generateToken('user123');
  
  const response = await fetch(`${BASE_URL}${endpoint}`, {
    headers: {
      'Authorization': `Bearer ${token}`,
      'Content-Type': 'application/json',
      'User-Agent': 'Antifraud-Test/1.0',
      ...options.headers
    },
    ...options
  });

  const data = await response.json();
  return { response, data };
}

// Fun√ß√£o para testar valida√ß√£o de cr√©ditos
async function testCreditValidation() {
  console.log('\nüîê TESTANDO VALIDA√á√ÉO DE CR√âDITOS...');
  
  const tests = [
    { type: 'sms', amount: 1 },
    { type: 'email', amount: 1 },
    { type: 'whatsapp', amount: 1 },
    { type: 'ai', amount: 1 }
  ];

  for (const test of tests) {
    try {
      const { response, data } = await makeRequest('/api/credits/validate', {
        method: 'POST',
        body: JSON.stringify(test)
      });

      console.log(`‚úÖ ${test.type.toUpperCase()}: ${data.valid ? 'V√ÅLIDO' : 'INV√ÅLIDO'} - ${data.remaining} cr√©ditos restantes`);
      
      if (data.error) {
        console.log(`   ‚ö†Ô∏è  Erro: ${data.error}`);
      }
    } catch (error) {
      console.log(`‚ùå ${test.type.toUpperCase()}: Erro na requisi√ß√£o - ${error.message}`);
    }
  }
}

// Fun√ß√£o para testar endpoints SMS com prote√ß√£o
async function testSMSProtection() {
  console.log('\nüì± TESTANDO PROTE√á√ÉO SMS...');
  
  try {
    const { response, data } = await makeRequest('/api/sms-credits');
    
    console.log(`‚úÖ SMS Credits: ${data.remaining} restantes, Plan: ${data.plan}`);
    console.log(`   Status: ${data.valid ? 'V√ÅLIDO' : 'INV√ÅLIDO'}`);
    
    if (data.error) {
      console.log(`   ‚ö†Ô∏è  Erro: ${data.error}`);
    }
  } catch (error) {
    console.log(`‚ùå SMS Credits: Erro na requisi√ß√£o - ${error.message}`);
  }
}

// Fun√ß√£o para testar endpoints do Stripe
async function testStripeIntegration() {
  console.log('\nüí≥ TESTANDO INTEGRA√á√ÉO STRIPE...');
  
  try {
    const { response, data } = await makeRequest('/api/stripe/customer', {
      method: 'POST'
    });

    if (response.status === 200) {
      console.log(`‚úÖ Stripe Customer: ${data.customerId}`);
    } else {
      console.log(`‚ùå Stripe Customer: ${data.error}`);
    }
  } catch (error) {
    console.log(`‚ùå Stripe Customer: Erro na requisi√ß√£o - ${error.message}`);
  }
}

// Fun√ß√£o para testar auditoria
async function testAuditSystem() {
  console.log('\nüìä TESTANDO SISTEMA DE AUDITORIA...');
  
  try {
    const { response, data } = await makeRequest('/api/credits/audit?days=7');
    
    console.log(`‚úÖ Audit Report: ${data.totalTransactions || 0} transa√ß√µes`);
    console.log(`   Per√≠odo: ${data.period || 'N/A'}`);
    console.log(`   Usu√°rio: ${data.userId || 'N/A'}`);
  } catch (error) {
    console.log(`‚ùå Audit Report: Erro na requisi√ß√£o - ${error.message}`);
  }
}

// Fun√ß√£o para testar sistema completo anti-burla
async function testAntifraudSystem() {
  console.log('\nüîê TESTANDO SISTEMA COMPLETO ANTI-BURLA...');
  
  try {
    const { response, data } = await makeRequest('/api/anti-fraud/test', {
      method: 'POST',
      body: JSON.stringify({ testType: 'comprehensive' })
    });

    console.log(`‚úÖ Anti-Fraud Test: Score ${data.score}% (${data.passCount}/${data.totalTests})`);
    console.log(`   Status: ${data.status}`);
    
    // Detalhar resultados por categoria
    for (const [category, result] of Object.entries(data.results)) {
      console.log(`   ${category.toUpperCase()}: ${result.status}`);
    }
  } catch (error) {
    console.log(`‚ùå Anti-Fraud Test: Erro na requisi√ß√£o - ${error.message}`);
  }
}

// Fun√ß√£o para testar rate limiting
async function testRateLimiting() {
  console.log('\n‚è±Ô∏è TESTANDO RATE LIMITING...');
  
  const requests = [];
  
  // Fazer 10 requisi√ß√µes simult√¢neas para testar rate limiting
  for (let i = 0; i < 10; i++) {
    requests.push(makeRequest('/api/credits/validate', {
      method: 'POST',
      body: JSON.stringify({ type: 'sms', amount: 1 })
    }));
  }

  try {
    const results = await Promise.all(requests);
    const blocked = results.filter(r => r.response.status === 429);
    
    console.log(`‚úÖ Rate Limiting: ${blocked.length}/10 requisi√ß√µes bloqueadas`);
    
    if (blocked.length > 0) {
      console.log(`   ‚ö†Ô∏è  Rate limit ativo - sistema funcionando corretamente`);
    } else {
      console.log(`   ‚ö†Ô∏è  Rate limit n√£o ativado - pode indicar problema`);
    }
  } catch (error) {
    console.log(`‚ùå Rate Limiting: Erro no teste - ${error.message}`);
  }
}

// Fun√ß√£o principal
async function runTests() {
  console.log('üîê INICIANDO TESTE COMPLETO DO SISTEMA ANTI-BURLA');
  console.log('=' * 60);
  
  const startTime = Date.now();
  
  try {
    // Executar todos os testes
    await testCreditValidation();
    await testSMSProtection();
    await testStripeIntegration();
    await testAuditSystem();
    await testAntifraudSystem();
    await testRateLimiting();
    
    const endTime = Date.now();
    const duration = endTime - startTime;
    
    console.log('\n' + '=' * 60);
    console.log(`üéâ TESTE COMPLETO FINALIZADO EM ${duration}ms`);
    console.log('üìä RESUMO:');
    console.log('   ‚úÖ Valida√ß√£o de cr√©ditos testada');
    console.log('   ‚úÖ Prote√ß√£o SMS testada');
    console.log('   ‚úÖ Integra√ß√£o Stripe testada');
    console.log('   ‚úÖ Sistema de auditoria testado');
    console.log('   ‚úÖ Sistema anti-burla testado');
    console.log('   ‚úÖ Rate limiting testado');
    console.log('\nüîí SISTEMA ANTI-BURLA OPERACIONAL!');
    
  } catch (error) {
    console.error('‚ùå ERRO CR√çTICO NO TESTE:', error);
    process.exit(1);
  }
}

// Executar testes se chamado diretamente
if (import.meta.url === `file://${process.argv[1]}`) {
  runTests();
}

export {
  runTests,
  testCreditValidation,
  testSMSProtection,
  testStripeIntegration,
  testAuditSystem,
  testAntifraudSystem,
  testRateLimiting
};