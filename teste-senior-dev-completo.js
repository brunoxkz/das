/**
 * TESTE SENIOR DEV - SISTEMA EMAIL MARKETING COMPLETO
 * Bateria de testes profissional para encontrar erros cr√≠ticos
 * Author: Senior Developer
 */

async function makeRequest(endpoint, options = {}) {
  const url = `http://localhost:5000${endpoint}`;
  const response = await fetch(url, {
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
  
  let data;
  try {
    data = await response.json();
  } catch (e) {
    const text = await response.text();
    throw new Error(`Response is not JSON: ${text.substring(0, 200)}...`);
  }
  
  return { response, data };
}

async function authenticate() {
  const { response, data } = await makeRequest('/api/auth/login', {
    method: 'POST',
    body: JSON.stringify({
      email: 'admin@vendzz.com',
      password: 'admin123'
    })
  });
  
  console.log(`üîê AUTH DEBUG - Status: ${response.status}, Data: ${JSON.stringify(data)}`);
  
  if (!response.ok) {
    throw new Error(`Auth failed: ${data.error || data.message}`);
  }
  
  // Verificar se o token est√° presente
  if (!data.token && !data.accessToken) {
    throw new Error(`Token n√£o encontrado na resposta: ${JSON.stringify(data)}`);
  }
  
  return data.token || data.accessToken;
}

async function testEmailCampaignSystem() {
  console.log('üß™ TESTE SENIOR DEV - SISTEMA EMAIL MARKETING COMPLETO');
  console.log('===========================================================');
  
  let token;
  try {
    token = await authenticate();
    console.log('‚úÖ Autentica√ß√£o realizada com sucesso');
  } catch (error) {
    console.log(`‚ùå ERRO CR√çTICO na autentica√ß√£o: ${error.message}`);
    return;
  }
  
  const headers = { Authorization: `Bearer ${token}` };
  
  // 1. TESTE CR√çTICO: DEBUG DE AUTENTICA√á√ÉO
  console.log('\nüéØ 1. TESTE CR√çTICO: DEBUG DE AUTENTICA√á√ÉO');
  if (token) {
    console.log(`üîë Token: ${token.substring(0, 20)}...${token.substring(token.length-10)}`);
  } else {
    console.log('‚ùå ERRO: Token √© undefined ou null');
    return;
  }
  
  // 2. TESTE CR√çTICO: Verificar se o token funciona com endpoint simples
  console.log('\nüéØ 2. TESTE CR√çTICO: VERIFICANDO TOKEN COM ENDPOINT SIMPLES');
  try {
    const { response: testResponse, data: testData } = await makeRequest('/api/email-campaigns', {
      method: 'GET',
      headers
    });
    
    console.log(`üìä Status: ${testResponse.status}`);
    console.log(`üìä Data: ${JSON.stringify(testData)}`);
    
    if (testResponse.ok) {
      console.log('‚úÖ Token funcionando corretamente');
    } else {
      console.log('‚ùå ERRO: Token n√£o est√° funcionando');
      console.log(`‚ùå ERRO ESPEC√çFICO: ${testData.error || testData.message}`);
      return;
    }
  } catch (error) {
    console.log(`‚ùå ERRO no teste de token: ${error.message}`);
    return;
  }
  
  // 3. TESTE CR√çTICO: Criar campanha com dados m√≠nimos
  console.log('\nüéØ 3. TESTE CR√çTICO: CRIANDO CAMPANHA COM DADOS M√çNIMOS');
  try {
    const campaignData = {
      name: 'TESTE SENIOR DEV - Email Real',
      quizId: 'Qm4wxpfPgkMrwoMhDFNLZ',
      subject: 'Teste Senior Dev - {{nome}}',
      content: 'Ol√° {{nome}}, este √© um teste com email real para {{email}}',
      targetAudience: 'completed',
      triggerType: 'scheduled',
      triggerDelay: 1,
      triggerUnit: 'minutes'
    };
    
    console.log(`üìä Dados da campanha: ${JSON.stringify(campaignData, null, 2)}`);
    
    const { response: createResponse, data: createData } = await makeRequest('/api/email-campaigns', {
      method: 'POST',
      headers,
      body: JSON.stringify(campaignData)
    });
    
    console.log(`üìä Status resposta: ${createResponse.status}`);
    console.log(`üìä Data resposta: ${JSON.stringify(createData, null, 2)}`);
    
    if (createResponse.ok) {
      console.log(`‚úÖ Campanha criada com sucesso`);
      
      // 4. TESTE CR√çTICO: Criar resposta com email real
      console.log('\nüéØ 4. TESTE CR√çTICO: CRIANDO RESPOSTA COM EMAIL REAL');
      const { response: responseCreateResponse, data: responseCreateData } = await makeRequest('/api/quizzes/Qm4wxpfPgkMrwoMhDFNLZ/responses', {
        method: 'POST',
        headers,
        body: JSON.stringify({
          responses: {
            nome: 'Bruno Tamaso',
            email: 'brunotamaso@gmail.com',
            telefone_principal: '11999887766',
            idade: '35'
          },
          metadata: {
            type: 'completed',
            isComplete: true,
            completionPercentage: 100,
            isPartial: false,
            completedAt: new Date().toISOString(),
            userAgent: 'senior-dev-test',
            ip: '127.0.0.1',
            totalPages: 4,
            timeSpent: 30000,
            leadData: {}
          }
        })
      });
      
      if (responseCreateResponse.ok) {
        console.log(`‚úÖ Resposta criada com email real: ${responseCreateData.id}`);
        
        // Aguardar 2 segundos para garantir que o sistema processou
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        // 5. TESTE CR√çTICO: Verificar extra√ß√£o de emails
        console.log('\nüéØ 5. TESTE CR√çTICO: VERIFICANDO EXTRA√á√ÉO DE EMAILS');
        const { response: emailsResponse, data: emailsData } = await makeRequest(`/api/quizzes/Qm4wxpfPgkMrwoMhDFNLZ/responses/emails`, {
          method: 'GET',
          headers
        });
        
        if (emailsResponse.ok) {
          console.log(`‚úÖ ${emailsData.totalEmails} emails extra√≠dos`);
          const hasBrunoEmail = emailsData.emails.some(email => email.email === 'brunotamaso@gmail.com');
          if (hasBrunoEmail) {
            console.log('‚úÖ Email brunotamaso@gmail.com ENCONTRADO nos dados extra√≠dos');
          } else {
            console.log('‚ùå ERRO: Email brunotamaso@gmail.com N√ÉO ENCONTRADO');
          }
        } else {
          console.log(`‚ùå ERRO na extra√ß√£o de emails: ${emailsData.error}`);
        }
        
        // 6. TESTE CR√çTICO: Iniciar campanha (onde ocorrem os erros)
        console.log('\nüéØ 6. TESTE CR√çTICO: INICIANDO CAMPANHA (POTENCIAL ERRO)');
        try {
          const { response: startResponse, data: startData } = await makeRequest(`/api/email-campaigns/${createData.campaignId}/start`, {
            method: 'POST',
            headers
          });
          
          if (startResponse.ok) {
            console.log(`‚úÖ Campanha iniciada com sucesso: ${startData.message}`);
            
            // Aguardar processamento
            await new Promise(resolve => setTimeout(resolve, 5000));
            
            // 7. TESTE CR√çTICO: Verificar logs para o email espec√≠fico
            console.log('\nüéØ 7. TESTE CR√çTICO: VERIFICANDO LOGS DO EMAIL ESPEC√çFICO');
            const { response: logsResponse, data: logsData } = await makeRequest(`/api/email-logs?campaignId=${createData.campaignId}`, {
              method: 'GET',
              headers
            });
            
            if (logsResponse.ok) {
              console.log(`‚úÖ ${logsData.length} logs encontrados`);
              
              const brunoLog = logsData.find(log => log.email === 'brunotamaso@gmail.com');
              if (brunoLog) {
                console.log('‚úÖ LOG ENCONTRADO para brunotamaso@gmail.com:');
                console.log(`   Status: ${brunoLog.status}`);
                console.log(`   Assunto: ${brunoLog.personalizedSubject}`);
                console.log(`   Conte√∫do: ${brunoLog.personalizedContent.substring(0, 100)}...`);
              } else {
                console.log('‚ùå ERRO: Nenhum log encontrado para brunotamaso@gmail.com');
              }
            } else {
              console.log(`‚ùå ERRO ao buscar logs: ${logsData.error}`);
            }
            
          } else {
            console.log(`‚ùå ERRO CR√çTICO ao iniciar campanha: ${startData.error}`);
          }
        } catch (error) {
          console.log(`‚ùå ERRO CR√çTICO no in√≠cio da campanha: ${error.message}`);
        }
        
      } else {
        console.log(`‚ùå ERRO ao criar resposta: ${responseCreateData.error}`);
      }
      
    } else {
      console.log(`‚ùå ERRO ao criar campanha: ${createData.error || createData.message || 'Erro desconhecido'}`);
    }
    
  } catch (error) {
    console.log(`‚ùå ERRO CR√çTICO no sistema: ${error.message}`);
  }
  
  // 6. TESTE DE STRESS: M√∫ltiplas opera√ß√µes simult√¢neas
  console.log('\nüéØ 6. TESTE DE STRESS: M√öLTIPLAS OPERA√á√ïES SIMULT√ÇNEAS');
  try {
    const promises = [];
    for (let i = 0; i < 5; i++) {
      promises.push(makeRequest('/api/email-campaigns', {
        method: 'GET',
        headers
      }));
    }
    
    const results = await Promise.all(promises);
    const allSuccessful = results.every(({ response }) => response.ok);
    
    if (allSuccessful) {
      console.log('‚úÖ Teste de stress: Todas as 5 requisi√ß√µes simult√¢neas foram bem-sucedidas');
    } else {
      console.log('‚ùå ERRO: Algumas requisi√ß√µes falharam no teste de stress');
    }
    
  } catch (error) {
    console.log(`‚ùå ERRO no teste de stress: ${error.message}`);
  }
  
  // 7. TESTE DE SEGURAN√áA: Token inv√°lido
  console.log('\nüéØ 7. TESTE DE SEGURAN√áA: TOKEN INV√ÅLIDO');
  try {
    const { response: securityResponse } = await makeRequest('/api/email-campaigns', {
      method: 'GET',
      headers: { Authorization: 'Bearer token-invalido' }
    });
    
    if (securityResponse.status === 401) {
      console.log('‚úÖ Seguran√ßa: Token inv√°lido corretamente rejeitado (401)');
    } else {
      console.log(`‚ùå ERRO DE SEGURAN√áA: Token inv√°lido aceito (${securityResponse.status})`);
    }
    
  } catch (error) {
    console.log(`‚ùå ERRO no teste de seguran√ßa: ${error.message}`);
  }
  
  console.log('\nüèÅ TESTE SENIOR DEV FINALIZADO!');
  console.log('===========================================');
}

// Executar teste
testEmailCampaignSystem().catch(console.error);