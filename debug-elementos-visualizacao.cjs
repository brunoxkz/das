#!/usr/bin/env node

/**
 * DEBUG ESPEC√çFICO - ELEMENTOS DE VISUALIZA√á√ÉO
 * =============================================
 * 
 * Testa especificamente os elementos gr√°fico e m√©trica para identificar
 * problemas que causam tela branca
 */

const fs = require('fs');

function debugElementsVisualization() {
  console.log('üîç DEBUG ELEMENTOS DE VISUALIZA√á√ÉO');
  console.log('===================================\n');

  const content = fs.readFileSync('client/src/components/page-editor-horizontal.tsx', 'utf8');

  // 1. Verificar se Select foi importado corretamente
  const selectImport = content.includes('import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue }');
  console.log(`‚úÖ Importa√ß√£o Select: ${selectImport ? 'ENCONTRADA' : 'AUSENTE'}`);

  // 2. Verificar casos espec√≠ficos dos elementos
  const chartCase = content.includes('case "chart":');
  const metricsCase = content.includes('case "metrics":');
  
  console.log(`‚úÖ Caso gr√°fico: ${chartCase ? 'ENCONTRADO' : 'AUSENTE'}`);
  console.log(`‚úÖ Caso m√©trica: ${metricsCase ? 'ENCONTRADO' : 'AUSENTE'}`);

  // 3. Verificar se TrendingUp foi importado
  const trendingUpImport = content.includes('TrendingUp');
  console.log(`‚úÖ TrendingUp importado: ${trendingUpImport ? 'SIM' : 'N√ÉO'}`);

  // 4. Verificar interpola√ß√µes duplas nos elementos
  const chartSection = content.match(/case "chart":(.*?)(?=case "|default:)/s);
  const metricsSection = content.match(/case "metrics":(.*?)(?=case "|default:)/s);

  if (chartSection) {
    const chartCode = chartSection[1];
    const chartDoubleInterpolations = chartCode.match(/style=\{\{[^}]+\}\}/g);
    console.log(`‚úÖ Interpola√ß√µes duplas no gr√°fico: ${chartDoubleInterpolations ? chartDoubleInterpolations.length : 0}`);
    
    if (chartDoubleInterpolations) {
      console.log('‚ùå INTERPOLA√á√ïES DUPLAS ENCONTRADAS NO GR√ÅFICO:');
      chartDoubleInterpolations.forEach((match, index) => {
        console.log(`  ${index + 1}. ${match}`);
      });
    }
  }

  if (metricsSection) {
    const metricsCode = metricsSection[1];
    const metricsDoubleInterpolations = metricsCode.match(/style=\{\{[^}]+\}\}/g);
    console.log(`‚úÖ Interpola√ß√µes duplas na m√©trica: ${metricsDoubleInterpolations ? metricsDoubleInterpolations.length : 0}`);
    
    if (metricsDoubleInterpolations) {
      console.log('‚ùå INTERPOLA√á√ïES DUPLAS ENCONTRADAS NA M√âTRICA:');
      metricsDoubleInterpolations.forEach((match, index) => {
        console.log(`  ${index + 1}. ${match}`);
      });
    }
  }

  // 5. Verificar vari√°veis undefined
  const undefinedVars = content.match(/\b(var_[a-zA-Z_]+|pergunta_[a-zA-Z_]+)\b/g);
  if (undefinedVars) {
    const uniqueVars = [...new Set(undefinedVars)];
    console.log(`‚ùå Vari√°veis undefined encontradas: ${uniqueVars.length}`);
    uniqueVars.forEach((varName, index) => {
      console.log(`  ${index + 1}. ${varName}`);
    });
  } else {
    console.log('‚úÖ Nenhuma vari√°vel undefined encontrada');
  }

  // 6. Verificar erros de sintaxe JSX
  const jsxErrors = [];
  
  // Verificar tags n√£o fechadas
  const openTags = content.match(/<[a-zA-Z][^>]*(?<!\/)>/g) || [];
  const closeTags = content.match(/<\/[a-zA-Z][^>]*>/g) || [];
  
  if (openTags.length !== closeTags.length) {
    jsxErrors.push(`Tags desbalanceadas: ${openTags.length} abertas, ${closeTags.length} fechadas`);
  }

  // Verificar chaves JSX desbalanceadas
  const openBraces = (content.match(/\{/g) || []).length;
  const closeBraces = (content.match(/\}/g) || []).length;
  
  if (openBraces !== closeBraces) {
    jsxErrors.push(`Chaves JSX desbalanceadas: ${openBraces} abertas, ${closeBraces} fechadas`);
  }

  console.log(`‚úÖ Erros de sintaxe JSX: ${jsxErrors.length}`);
  
  if (jsxErrors.length > 0) {
    console.log('‚ùå ERROS DE SINTAXE ENCONTRADOS:');
    jsxErrors.forEach((error, index) => {
      console.log(`  ${index + 1}. ${error}`);
    });
  }

  // 7. Resumo final
  console.log('\nüìä RESUMO FINAL:');
  console.log('================');
  
  const allGood = selectImport && chartCase && metricsCase && trendingUpImport && 
                  jsxErrors.length === 0 && !undefinedVars;
  
  if (allGood) {
    console.log('üéØ TODOS OS ELEMENTOS DEVEM FUNCIONAR CORRETAMENTE');
    console.log('‚úÖ Importa√ß√µes: OK');
    console.log('‚úÖ Casos: OK');
    console.log('‚úÖ Sintaxe: OK');
    console.log('‚úÖ Vari√°veis: OK');
  } else {
    console.log('‚ö†Ô∏è  PROBLEMAS ENCONTRADOS - TELA BRANCA PODE OCORRER');
    console.log(`‚ùå Importa√ß√µes: ${selectImport ? 'OK' : 'ERRO'}`);
    console.log(`‚ùå Casos: ${chartCase && metricsCase ? 'OK' : 'ERRO'}`);
    console.log(`‚ùå Sintaxe: ${jsxErrors.length === 0 ? 'OK' : 'ERRO'}`);
    console.log(`‚ùå Vari√°veis: ${!undefinedVars ? 'OK' : 'ERRO'}`);
  }
}

debugElementsVisualization();