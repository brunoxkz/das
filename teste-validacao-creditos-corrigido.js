import axios from 'axios';
import fs from 'fs';

const API_BASE = 'http://localhost:5000/api';

// Fun√ß√£o para fazer requests
async function makeRequest(endpoint, options = {}) {
  try {
    const response = await axios({
      method: options.method || 'GET',
      url: `${API_BASE}${endpoint}`,
      headers: {
        'Authorization': `Bearer ${options.token}`,
        'Content-Type': 'application/json',
        ...options.headers
      },
      data: options.data
    });
    return { success: true, data: response.data, status: response.status };
  } catch (error) {
    return { 
      success: false, 
      error: error.response?.data?.error || error.message, 
      status: error.response?.status || 500,
      fullError: error.response?.data
    };
  }
}

// Autentica√ß√£o
async function authenticate() {
  console.log('üîê Autenticando admin...');
  const result = await makeRequest('/auth/login', {
    method: 'POST',
    data: { email: 'admin@admin.com', password: 'admin123' }
  });
  
  if (result.success) {
    console.log('‚úÖ Autentica√ß√£o bem-sucedida');
    return result.data.token;
  } else {
    console.log('‚ùå Erro na autentica√ß√£o:', result.error);
    return null;
  }
}

// Criar quiz de teste
async function createTestQuiz(token) {
  console.log('üìù Criando quiz de teste...');
  const result = await makeRequest('/quizzes', {
    method: 'POST',
    token: token,
    data: {
      title: 'Quiz Teste Cr√©ditos',
      description: 'Quiz para testar valida√ß√£o de cr√©ditos',
      published: true
    }
  });
  
  if (result.success) {
    console.log('‚úÖ Quiz criado:', result.data.id);
    return result.data.id;
  } else {
    console.log('‚ùå Erro ao criar quiz:', result.error);
    return null;
  }
}

// Zerar cr√©ditos
async function zeroCredits(token) {
  console.log('üîÑ Zerando cr√©ditos...');
  const result = await makeRequest('/users/update-credits', {
    method: 'POST',
    token: token,
    data: { 
      smsCredits: 0,
      emailCredits: 0,
      whatsappCredits: 0,
      aiCredits: 0
    }
  });
  
  if (result.success) {
    console.log('‚úÖ Cr√©ditos zerados');
    return true;
  } else {
    console.log('‚ùå Erro ao zerar cr√©ditos:', result.error);
    return false;
  }
}

// Testar bloqueio de cr√©ditos
async function testCreditBlocking(token, quizId) {
  console.log('\nüîí TESTANDO BLOQUEIO DE CR√âDITOS...');
  
  // Teste 1: SMS
  console.log('üì± Testando SMS...');
  const smsResult = await makeRequest('/sms-campaigns', {
    method: 'POST',
    token: token,
    data: {
      name: 'Teste SMS Zero Cr√©ditos',
      quizId: quizId,
      message: 'Mensagem teste',
      targetAudience: 'all',
      campaignType: 'live',
      triggerType: 'immediate'
    }
  });
  
  const smsBlocked = smsResult.status === 402;
  console.log(`SMS: ${smsBlocked ? '‚úÖ BLOQUEADO' : '‚ùå PERMITIDO'} (status: ${smsResult.status})`);
  
  // Teste 2: Email
  console.log('üìß Testando Email...');
  const emailResult = await makeRequest('/email-campaigns', {
    method: 'POST',
    token: token,
    data: {
      name: 'Teste Email Zero Cr√©ditos',
      quizId: quizId,
      subject: 'Teste',
      content: 'Mensagem teste',
      targetAudience: 'all',
      triggerType: 'immediate'
    }
  });
  
  const emailBlocked = emailResult.status === 402;
  console.log(`Email: ${emailBlocked ? '‚úÖ BLOQUEADO' : '‚ùå PERMITIDO'} (status: ${emailResult.status})`);
  
  // Teste 3: WhatsApp
  console.log('üí¨ Testando WhatsApp...');
  const whatsappResult = await makeRequest('/whatsapp-campaigns', {
    method: 'POST',
    token: token,
    data: {
      name: 'Teste WhatsApp Zero Cr√©ditos',
      quizId: quizId,
      messages: ['Mensagem teste'],
      targetAudience: 'all',
      triggerType: 'immediate'
    }
  });
  
  const whatsappBlocked = whatsappResult.status === 402;
  console.log(`WhatsApp: ${whatsappBlocked ? '‚úÖ BLOQUEADO' : '‚ùå PERMITIDO'} (status: ${whatsappResult.status})`);
  
  return { smsBlocked, emailBlocked, whatsappBlocked };
}

// Testar com cr√©ditos
async function testWithCredits(token, quizId) {
  console.log('\nüí∞ TESTANDO COM CR√âDITOS...');
  
  // Adicionar cr√©ditos
  console.log('üîÑ Adicionando cr√©ditos...');
  const creditsResult = await makeRequest('/users/update-credits', {
    method: 'POST',
    token: token,
    data: { 
      smsCredits: 10,
      emailCredits: 10,
      whatsappCredits: 10,
      aiCredits: 10
    }
  });
  
  if (!creditsResult.success) {
    console.log('‚ùå Erro ao adicionar cr√©ditos:', creditsResult.error);
    return false;
  }
  
  console.log('‚úÖ Cr√©ditos adicionados');
  
  // Testar cria√ß√£o de campanhas
  console.log('üì± Testando SMS com cr√©ditos...');
  const smsResult = await makeRequest('/sms-campaigns', {
    method: 'POST',
    token: token,
    data: {
      name: 'Teste SMS Com Cr√©ditos',
      quizId: quizId,
      message: 'Mensagem teste',
      targetAudience: 'all',
      campaignType: 'live',
      triggerType: 'immediate'
    }
  });
  
  const smsAllowed = smsResult.status === 200 || smsResult.status === 201;
  console.log(`SMS: ${smsAllowed ? '‚úÖ PERMITIDO' : '‚ùå BLOQUEADO'} (status: ${smsResult.status})`);
  
  return { smsAllowed };
}

// Teste principal
async function runTest() {
  console.log('üöÄ TESTE DE VALIDA√á√ÉO DE CR√âDITOS - SISTEMA CORRIGIDO');
  console.log('================================================================');
  
  const token = await authenticate();
  if (!token) return;
  
  const quizId = await createTestQuiz(token);
  if (!quizId) return;
  
  // Zerar cr√©ditos
  await zeroCredits(token);
  
  // Testar bloqueio
  const blockingResults = await testCreditBlocking(token, quizId);
  
  // Testar com cr√©ditos
  const allowResults = await testWithCredits(token, quizId);
  
  console.log('\nüìä RESULTADOS FINAIS:');
  console.log('========================');
  
  const totalTests = 4;
  let approvedTests = 0;
  
  if (blockingResults.smsBlocked) {
    console.log('‚úÖ SMS bloqueado sem cr√©ditos');
    approvedTests++;
  } else {
    console.log('‚ùå SMS N√ÉO bloqueado sem cr√©ditos');
  }
  
  if (blockingResults.emailBlocked) {
    console.log('‚úÖ Email bloqueado sem cr√©ditos');
    approvedTests++;
  } else {
    console.log('‚ùå Email N√ÉO bloqueado sem cr√©ditos');
  }
  
  if (blockingResults.whatsappBlocked) {
    console.log('‚úÖ WhatsApp bloqueado sem cr√©ditos');
    approvedTests++;
  } else {
    console.log('‚ùå WhatsApp N√ÉO bloqueado sem cr√©ditos');
  }
  
  if (allowResults.smsAllowed) {
    console.log('‚úÖ SMS permitido com cr√©ditos');
    approvedTests++;
  } else {
    console.log('‚ùå SMS N√ÉO permitido com cr√©ditos');
  }
  
  const successRate = Math.round((approvedTests / totalTests) * 100);
  console.log(`\nüìà Taxa de Sucesso: ${successRate}%`);
  console.log(`‚úÖ Testes Aprovados: ${approvedTests}`);
  console.log(`‚ùå Falhas: ${totalTests - approvedTests}`);
  
  if (successRate === 100) {
    console.log('üéâ SISTEMA DE CR√âDITOS 100% FUNCIONAL!');
  } else if (successRate >= 75) {
    console.log('‚ö†Ô∏è Sistema funcionando com algumas falhas');
  } else {
    console.log('‚ùå Sistema com falhas cr√≠ticas');
  }
  
  console.log('\nüìÑ Relat√≥rio salvo em: RELATORIO-CREDITOS-CORRIGIDO.json');
  
  const report = {
    timestamp: new Date().toISOString(),
    titulo: 'TESTE SISTEMA DE CR√âDITOS CORRIGIDO',
    successRate,
    approvedTests,
    totalTests,
    tests: {
      smsBlocked: blockingResults.smsBlocked,
      emailBlocked: blockingResults.emailBlocked,
      whatsappBlocked: blockingResults.whatsappBlocked,
      smsAllowed: allowResults.smsAllowed
    }
  };
  
  fs.writeFileSync('RELATORIO-CREDITOS-CORRIGIDO.json', JSON.stringify(report, null, 2));
}

runTest().catch(console.error);