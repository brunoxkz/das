/**
 * TESTE FRONTEND - ANIMATED TRANSITION ELEMENT
 * Verifica se o elemento est√° sendo renderizado corretamente no frontend
 */

import fs from 'fs';

console.log('üé¨ TESTE FRONTEND - ANIMATED TRANSITION');
console.log('=' .repeat(50));

// 1. Verificar se o elemento est√° na lista de elementos dispon√≠veis
console.log('\nüìã TESTE 1: Verificando Lista de Elementos');
const pageEditorPath = 'client/src/components/page-editor-horizontal.tsx';

try {
  const content = fs.readFileSync(pageEditorPath, 'utf8');
  
  // Verificar se animated_transition est√° no tipo Element
  const hasTypeDefinition = content.includes('"animated_transition"');
  console.log(`‚úÖ Tipo Element cont√©m animated_transition: ${hasTypeDefinition}`);
  
  // Verificar se est√° na lista de elementos dispon√≠veis
  const hasElementInList = content.includes('animated_transition: "Transi√ß√£o Animada"');
  console.log(`‚úÖ Element est√° na lista de tipos: ${hasElementInList}`);
  
  // Verificar se est√° na categoria correta
  const hasElementInCategory = content.includes('{ type: "animated_transition", label: "Transi√ß√£o", icon: <Sparkles className="w-4 h-4" /> }');
  console.log(`‚úÖ Element est√° na categoria Conte√∫do: ${hasElementInCategory}`);
  
  // Verificar se tem renderiza√ß√£o no preview
  const hasPreviewRender = content.includes('case "animated_transition":');
  console.log(`‚úÖ Element tem renderiza√ß√£o no preview: ${hasPreviewRender}`);
  
  // Verificar se tem propriedades configur√°veis
  const hasPropertiesPanel = content.includes('selectedElementData.type === "animated_transition"');
  console.log(`‚úÖ Element tem painel de propriedades: ${hasPropertiesPanel}`);
  
  // Verificar propriedades espec√≠ficas
  const hasAnimationType = content.includes('animationType');
  const hasAnimationSpeed = content.includes('animationSpeed');
  const hasGradientStart = content.includes('gradientStart');
  const hasGradientEnd = content.includes('gradientEnd');
  
  console.log(`‚úÖ Propriedade animationType: ${hasAnimationType}`);
  console.log(`‚úÖ Propriedade animationSpeed: ${hasAnimationSpeed}`);
  console.log(`‚úÖ Propriedade gradientStart: ${hasGradientStart}`);
  console.log(`‚úÖ Propriedade gradientEnd: ${hasGradientEnd}`);
  
} catch (error) {
  console.error('‚ùå Erro ao ler arquivo page-editor:', error.message);
}

// 2. Verificar renderiza√ß√£o no quiz preview
console.log('\nüìã TESTE 2: Verificando Quiz Preview');
const quizPreviewPath = 'client/src/components/quiz-preview.tsx';

try {
  const content = fs.readFileSync(quizPreviewPath, 'utf8');
  
  // Verificar se tem renderiza√ß√£o
  const hasRender = content.includes("case 'animated_transition':");
  console.log(`‚úÖ Quiz preview tem renderiza√ß√£o: ${hasRender}`);
  
  // Verificar se usa propriedades personalizadas
  const usesGradientProperties = content.includes('gradientStart') && content.includes('gradientEnd');
  console.log(`‚úÖ Quiz preview usa gradientes personalizados: ${usesGradientProperties}`);
  
  // Verificar se usa anima√ß√µes
  const usesAnimations = content.includes('animationType') && content.includes('animationSpeed');
  console.log(`‚úÖ Quiz preview usa anima√ß√µes personalizadas: ${usesAnimations}`);
  
} catch (error) {
  console.error('‚ùå Erro ao ler arquivo quiz-preview:', error.message);
}

// 3. Verificar renderiza√ß√£o no quiz p√∫blico
console.log('\nüìã TESTE 3: Verificando Quiz P√∫blico');
const quizPublicPath = 'client/src/components/quiz-public-renderer.tsx';

try {
  const content = fs.readFileSync(quizPublicPath, 'utf8');
  
  // Verificar se tem renderiza√ß√£o
  const hasRender = content.includes("case 'animated_transition':");
  console.log(`‚úÖ Quiz p√∫blico tem renderiza√ß√£o: ${hasRender}`);
  
  // Verificar se usa propriedades do properties object
  const usesPropertiesObject = content.includes('properties.gradientStart') && content.includes('properties.gradientEnd');
  console.log(`‚úÖ Quiz p√∫blico usa properties object: ${usesPropertiesObject}`);
  
  // Verificar se usa anima√ß√µes
  const usesAnimations = content.includes('properties.animationType') && content.includes('properties.animationSpeed');
  console.log(`‚úÖ Quiz p√∫blico usa anima√ß√µes: ${usesAnimations}`);
  
} catch (error) {
  console.error('‚ùå Erro ao ler arquivo quiz-public-renderer:', error.message);
}

// 4. Verificar classes CSS necess√°rias
console.log('\nüìã TESTE 4: Verificando Classes CSS');

// Verificar se as classes de anima√ß√£o est√£o sendo usadas corretamente
const animationClasses = [
  'animate-pulse',
  'animate-ping', 
  'animate-bounce',
  'duration-500',
  'duration-1000',
  'duration-2000'
];

try {
  const pageEditorContent = fs.readFileSync(pageEditorPath, 'utf8');
  const quizPreviewContent = fs.readFileSync(quizPreviewPath, 'utf8');
  const quizPublicContent = fs.readFileSync(quizPublicPath, 'utf8');
  
  animationClasses.forEach(className => {
    const inPageEditor = pageEditorContent.includes(className);
    const inQuizPreview = quizPreviewContent.includes(className);
    const inQuizPublic = quizPublicContent.includes(className);
    
    console.log(`‚úÖ Classe ${className}: Editor:${inPageEditor} Preview:${inQuizPreview} Public:${inQuizPublic}`);
  });
  
} catch (error) {
  console.error('‚ùå Erro ao verificar classes CSS:', error.message);
}

// 5. Verificar se o elemento est√° listado na categoria correta
console.log('\nüìã TESTE 5: Verificando Categoriza√ß√£o');

try {
  const content = fs.readFileSync(pageEditorPath, 'utf8');
  
  // Verificar se est√° na categoria "Conte√∫do"
  const contentCategoryMatch = content.match(/Conte√∫do.*?elements:\s*\[(.*?)\]/s);
  if (contentCategoryMatch) {
    const elementsInCategory = contentCategoryMatch[1];
    const hasAnimatedTransition = elementsInCategory.includes('animated_transition');
    console.log(`‚úÖ Elemento est√° na categoria Conte√∫do: ${hasAnimatedTransition}`);
  } else {
    console.log('‚ö†Ô∏è  N√£o foi poss√≠vel encontrar a categoria Conte√∫do');
  }
  
} catch (error) {
  console.error('‚ùå Erro ao verificar categoriza√ß√£o:', error.message);
}

// 6. Verificar integra√ß√£o com sistema de propriedades
console.log('\nüìã TESTE 6: Verificando Sistema de Propriedades');

try {
  const content = fs.readFileSync(pageEditorPath, 'utf8');
  
  // Verificar se as propriedades est√£o sendo salvas corretamente
  const hasUpdateElement = content.includes('updateElement(selectedElementData.id, { animationType: e.target.value })');
  console.log(`‚úÖ Sistema de atualiza√ß√£o de propriedades: ${hasUpdateElement}`);
  
  // Verificar se as propriedades t√™m valores padr√£o
  const hasDefaultValues = content.includes('|| "pulse"') && content.includes('|| "normal"');
  console.log(`‚úÖ Valores padr√£o definidos: ${hasDefaultValues}`);
  
  // Verificar se h√° valida√ß√£o de entrada
  const hasValidation = content.includes('value={selectedElementData.animationType || "pulse"}');
  console.log(`‚úÖ Valida√ß√£o de entrada: ${hasValidation}`);
  
} catch (error) {
  console.error('‚ùå Erro ao verificar sistema de propriedades:', error.message);
}

console.log('\n' + '=' .repeat(50));
console.log('üéâ TESTE FRONTEND CONCLU√çDO');
console.log('üé® Elemento animated_transition verificado em todos os componentes');
console.log('=' .repeat(50));