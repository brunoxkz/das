// SISTEMA DE DEDUPLICA√á√ÉO DE QUIZ COMPLETIONS
// Garante que apenas 1 notifica√ß√£o seja enviada por completion real

export class QuizCompletionDeduplicator {
  private static processedCompletions: Set<string> = new Set();
  private static userCompletionTimes: Map<string, number> = new Map();
  
  /**
   * Verifica se uma completion j√° foi processada
   * Usa m√∫ltiplas estrat√©gias anti-duplicata
   */
  static isCompletionAlreadyProcessed(quizId: string, userId: string): boolean {
    const now = Date.now();
    
    // Estrat√©gia 1: Chave √∫nica por quiz + user
    const uniqueKey = `${quizId}_${userId}`;
    
    // Estrat√©gia 2: Verificar se user j√° completou este quiz recentemente (√∫ltimos 30 segundos)
    const lastCompletionTime = this.userCompletionTimes.get(uniqueKey);
    if (lastCompletionTime && (now - lastCompletionTime) < 30000) {
      console.log(`üîÑ DUPLICATA TEMPORAL: Quiz ${quizId} j√° processado h√° ${(now - lastCompletionTime)/1000}s para usu√°rio ${userId} - ignorando`);
      return true;
    }
    
    // Estrat√©gia 3: Verificar se j√° est√° na lista de processados
    if (this.processedCompletions.has(uniqueKey)) {
      console.log(`üîÑ DUPLICATA DETECTADA: Quiz ${quizId} + User ${userId} j√° processado - ignorando`);
      return true;
    }
    
    // NOVA COMPLETION: Marcar como processada
    this.processedCompletions.add(uniqueKey);
    this.userCompletionTimes.set(uniqueKey, now);
    
    console.log(`‚úÖ NOVA COMPLETION APROVADA: Quiz ${quizId} para usu√°rio ${userId} ser√° processada`);
    
    // Limpeza autom√°tica (manter apenas √∫ltimas 1000 entradas)
    if (this.processedCompletions.size > 1000) {
      this.cleanupOldEntries();
    }
    
    return false;
  }
  
  /**
   * Limpa entradas antigas para evitar memory leak
   */
  private static cleanupOldEntries(): void {
    const now = Date.now();
    const expireTime = 60 * 60 * 1000; // 1 hora
    
    // Remover entradas antigas
    for (const [key, timestamp] of this.userCompletionTimes.entries()) {
      if (now - timestamp > expireTime) {
        this.userCompletionTimes.delete(key);
        this.processedCompletions.delete(key);
      }
    }
    
    console.log(`üßπ Limpeza autom√°tica: ${this.processedCompletions.size} entradas ativas, antigas removidas`);
  }
  
  /**
   * For√ßa reset do sistema (para testes)
   */
  static reset(): void {
    this.processedCompletions.clear();
    this.userCompletionTimes.clear();
    console.log(`üîÑ Sistema de deduplica√ß√£o resetado`);
  }
  
  /**
   * Estat√≠sticas do sistema
   */
  static getStats() {
    return {
      totalProcessed: this.processedCompletions.size,
      oldestEntry: Math.min(...Array.from(this.userCompletionTimes.values())),
      newestEntry: Math.max(...Array.from(this.userCompletionTimes.values())),
      systemStatus: 'active'
    };
  }
}