#!/usr/bin/env node

/**
 * DEBUG DO ELEMENTO M√âTRICA
 * =========================
 * 
 * Investigar problemas que causam tela branca no elemento m√©trica
 */

import fs from 'fs';

console.log('üîç INVESTIGANDO PROBLEMAS NO ELEMENTO M√âTRICA');
console.log('==============================================\n');

// Ler o arquivo do editor
const editorFile = fs.readFileSync('client/src/components/page-editor-horizontal.tsx', 'utf8');

// Procurar por problemas no elemento m√©trica
const problemsFound = [];

// 1. Verificar se h√° vari√°veis undefined ou refer√™ncias problem√°ticas
const undefinedVariables = editorFile.match(/\b(var_[a-zA-Z_]+)\b/g);
if (undefinedVariables) {
  problemsFound.push({
    type: 'Vari√°veis undefined',
    description: 'Vari√°veis que podem estar undefined',
    count: undefinedVariables.length,
    matches: undefinedVariables
  });
}

// 2. Verificar interpola√ß√£o incorreta em JSX
const badInterpolation = editorFile.match(/\{\{[^}]+\}\}/g);
if (badInterpolation) {
  problemsFound.push({
    type: 'Interpola√ß√£o incorreta',
    description: 'Interpola√ß√£o que pode estar incorreta',
    count: badInterpolation.length,
    matches: badInterpolation
  });
}

// 3. Verificar refer√™ncias JSX problem√°ticas
const badJSXReferences = editorFile.match(/\{\"[^\"]*var_[^\"]*\"/g);
if (badJSXReferences) {
  problemsFound.push({
    type: 'Refer√™ncias JSX problem√°ticas',
    description: 'Refer√™ncias JSX com vari√°veis var_',
    count: badJSXReferences.length,
    matches: badJSXReferences
  });
}

// 4. Verificar se h√° erros espec√≠ficos no elemento m√©trica
const metricsSection = editorFile.match(/case "metrics":(.*?)(?=case "|default:)/s);
if (metricsSection) {
  const metricsCode = metricsSection[1];
  
  // Verificar se h√° vari√°veis undefined no c√≥digo de m√©trica
  const metricsUndefined = metricsCode.match(/\b(var_[a-zA-Z_]+)\b/g);
  if (metricsUndefined) {
    problemsFound.push({
      type: 'Vari√°veis undefined no elemento m√©trica',
      description: 'Vari√°veis undefined espec√≠ficas do elemento m√©trica',
      count: metricsUndefined.length,
      matches: metricsUndefined
    });
  }
  
  // Verificar interpola√ß√£o problem√°tica no elemento m√©trica
  const metricsInterpolation = metricsCode.match(/\{\{[^}]+\}\}/g);
  if (metricsInterpolation) {
    problemsFound.push({
      type: 'Interpola√ß√£o problem√°tica no elemento m√©trica',
      description: 'Interpola√ß√£o que pode causar erro no elemento m√©trica',
      count: metricsInterpolation.length,
      matches: metricsInterpolation
    });
  }
}

// 5. Verificar se h√° imports faltantes
const imports = editorFile.match(/import\s+\{[^}]+\}\s+from\s+['"]/g);
const lucideImports = editorFile.match(/import\s+\{[^}]+\}\s+from\s+['"]lucide-react['"]/);
if (lucideImports) {
  const importedIcons = lucideImports[0].match(/\b[A-Z][a-zA-Z0-9]*\b/g);
  
  // Verificar se TrendingUp est√° importado (usado no elemento m√©trica)
  if (!importedIcons || !importedIcons.includes('TrendingUp')) {
    problemsFound.push({
      type: 'Import faltante',
      description: 'TrendingUp n√£o est√° importado mas √© usado no elemento m√©trica',
      count: 1,
      matches: ['TrendingUp']
    });
  }
}

// Exibir resultados
console.log('üìä RESULTADOS DA INVESTIGA√á√ÉO:');
console.log('=============================');

if (problemsFound.length === 0) {
  console.log('‚úÖ Nenhum problema espec√≠fico encontrado no elemento m√©trica');
} else {
  console.log('‚ùå Problemas encontrados:\n');
  problemsFound.forEach(problem => {
    console.log(`  üî¥ ${problem.type}:`);
    console.log(`     - Descri√ß√£o: ${problem.description}`);
    console.log(`     - Ocorr√™ncias: ${problem.count}`);
    console.log(`     - Matches: ${problem.matches.join(', ')}\n`);
  });
}

console.log('üîß VERIFICANDO CORRE√á√ïES APLICADAS:');
console.log('==================================');

// Verificar se as corre√ß√µes anteriores foram aplicadas
const hasVarComentario = editorFile.includes('var_comentario');
const hasVarEscolha = editorFile.includes('var_escolha');
const hasPerguntaContinuacao = editorFile.includes('pergunta_continuacao');

console.log(hasVarComentario ? '‚ùå var_comentario ainda presente' : '‚úÖ var_comentario removido');
console.log(hasVarEscolha ? '‚ùå var_escolha ainda presente' : '‚úÖ var_escolha removido');
console.log(hasPerguntaContinuacao ? '‚ùå pergunta_continuacao ainda presente' : '‚úÖ pergunta_continuacao removido');

console.log('\nüìù RECOMENDA√á√ïES:');
console.log('=================');

if (problemsFound.length > 0) {
  console.log('‚ö†Ô∏è  Problemas encontrados que podem causar tela branca');
  console.log('‚ö†Ô∏è  Revise as ocorr√™ncias encontradas acima');
  console.log('‚ö†Ô∏è  Corrija as refer√™ncias problem√°ticas antes de testar');
} else {
  console.log('‚úÖ Nenhum problema √≥bvio encontrado no elemento m√©trica');
  console.log('‚úÖ O problema pode estar em outro lugar do c√≥digo');
  console.log('‚úÖ Recomenda-se verificar logs do console do navegador');
}