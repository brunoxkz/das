/**
 * üéØ TESTE DE VALIDA√á√ÉO COMPLETA DO SISTEMA
 * Verifica se todas as funcionalidades est√£o operacionais ap√≥s corre√ß√£o do schema
 */

const BASE_URL = 'http://localhost:5000';

// Fun√ß√£o para fazer requisi√ß√µes HTTP
async function makeRequest(endpoint, options = {}) {
  const url = `${BASE_URL}${endpoint}`;
  const config = {
    method: 'GET',
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
    ...options,
  };

  if (config.body && typeof config.body === 'object') {
    config.body = JSON.stringify(config.body);
  }

  try {
    const response = await fetch(url, config);
    
    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`HTTP ${response.status}: ${errorText}`);
    }

    const data = await response.json();
    return data;
  } catch (error) {
    console.error(`‚ùå Erro na requisi√ß√£o para ${endpoint}:`, error.message);
    throw error;
  }
}

// Fun√ß√£o para autenticar
async function authenticate() {
  const credentials = {
    email: 'admin@vendzz.com',
    password: 'admin123'
  };

  try {
    const response = await makeRequest('/api/auth/login', {
      method: 'POST',
      body: credentials
    });

    if (response.accessToken) {
      console.log('‚úÖ Autentica√ß√£o bem-sucedida');
      return response.accessToken;
    } else {
      throw new Error('Token n√£o recebido');
    }
  } catch (error) {
    console.error('‚ùå Falha na autentica√ß√£o:', error.message);
    throw error;
  }
}

// Teste 1: Cria√ß√£o de resposta de quiz
async function testeQuizResponse(token) {
  console.log('\nüîç TESTE 1: CRIA√á√ÉO DE RESPOSTA DE QUIZ');
  console.log('=======================================');

  try {
    // Buscar quiz existente
    const quizzes = await makeRequest('/api/quizzes', {
      headers: { 'Authorization': `Bearer ${token}` }
    });

    if (quizzes.length === 0) {
      console.log('‚ùå Nenhum quiz encontrado');
      return false;
    }

    const quiz = quizzes[0];
    console.log(`üìã Quiz encontrado: ${quiz.title}`);

    // Criar resposta
    const response = await makeRequest('/api/quiz-responses', {
      method: 'POST',
      headers: { 'Authorization': `Bearer ${token}` },
      body: {
        quizId: quiz.id,
        responses: {
          nome_completo: 'Jo√£o Silva Valida√ß√£o',
          email_contato: 'joao.validacao@teste.com',
          telefone_contato: '11999887766'
        },
        metadata: {
          isComplete: true,
          completionPercentage: 100
        }
      }
    });

    console.log(`‚úÖ Resposta criada com sucesso: ${response.id}`);
    return { quiz, response };
  } catch (error) {
    console.error('‚ùå Erro no teste de resposta:', error.message);
    return false;
  }
}

// Teste 2: Cria√ß√£o de campanha SMS
async function testeCampanhaSMS(quizId, token) {
  console.log('\nüîç TESTE 2: CRIA√á√ÉO DE CAMPANHA SMS');
  console.log('===================================');

  try {
    const campanha = await makeRequest('/api/sms-campaigns', {
      method: 'POST',
      headers: { 'Authorization': `Bearer ${token}` },
      body: {
        name: 'Campanha Teste Valida√ß√£o',
        quizId: quizId,
        message: 'Ol√° {nome_completo}! Obrigado por responder nosso quiz. Sua resposta foi registrada!',
        targetAudience: 'all',
        campaignType: 'standard',
        triggerDelay: 10,
        triggerUnit: 'minutes'
      }
    });

    console.log(`‚úÖ Campanha SMS criada: ${campanha.id}`);
    
    // Verificar logs da campanha
    const logs = await makeRequest(`/api/sms-campaigns/${campanha.id}/logs`, {
      headers: { 'Authorization': `Bearer ${token}` }
    });

    console.log(`üìä Logs da campanha: ${logs.length} telefones`);
    logs.forEach((log, index) => {
      console.log(`   ${index + 1}. ${log.phone} - ${log.status}`);
    });

    return campanha;
  } catch (error) {
    console.error('‚ùå Erro no teste de campanha SMS:', error.message);
    return false;
  }
}

// Teste 3: Detec√ß√£o de pa√≠ses
async function testeDeteccaoPaises(token) {
  console.log('\nüîç TESTE 3: DETEC√á√ÉO DE PA√çSES');
  console.log('===============================');

  const numerosTeste = [
    { numero: '11999887766', paisEsperado: 'Brasil' },
    { numero: '8613812345678', paisEsperado: 'China' },
    { numero: '15551234567', paisEsperado: 'Estados Unidos' },
    { numero: '21988776655', paisEsperado: 'Brasil' }
  ];

  try {
    for (const teste of numerosTeste) {
      const resultado = await makeRequest('/api/sms/direct', {
        method: 'POST',
        headers: { 'Authorization': `Bearer ${token}` },
        body: {
          phone: teste.numero,
          message: 'Teste de detec√ß√£o de pa√≠s'
        }
      });

      console.log(`üì± ${teste.numero}: ${resultado.country} (esperado: ${teste.paisEsperado})`);
    }

    return true;
  } catch (error) {
    console.error('‚ùå Erro no teste de detec√ß√£o de pa√≠ses:', error.message);
    return false;
  }
}

// Teste 4: Analytics do sistema
async function testeAnalytics(token) {
  console.log('\nüîç TESTE 4: ANALYTICS DO SISTEMA');
  console.log('=================================');

  try {
    const analytics = await makeRequest('/api/analytics/dashboard', {
      headers: { 'Authorization': `Bearer ${token}` }
    });

    console.log(`üìä Quizzes: ${analytics.quizzes.length}`);
    console.log(`üìä Visualiza√ß√µes: ${analytics.totalViews}`);
    console.log(`üìä Respostas: ${analytics.totalResponses}`);
    console.log(`üìä Taxa de convers√£o: ${analytics.conversionRate}%`);

    return analytics;
  } catch (error) {
    console.error('‚ùå Erro no teste de analytics:', error.message);
    return false;
  }
}

// Fun√ß√£o principal
async function executarValidacaoCompleta() {
  console.log('üéØ VALIDA√á√ÉO COMPLETA DO SISTEMA VENDZZ');
  console.log('=======================================');

  try {
    // Autenticar
    const token = await authenticate();
    
    // Teste 1: Quiz Response
    const quizTest = await testeQuizResponse(token);
    if (!quizTest) {
      console.log('‚ùå SISTEMA N√ÉO APROVADO - Falha na cria√ß√£o de resposta');
      return;
    }

    // Teste 2: Campanha SMS
    const smsTest = await testeCampanhaSMS(quizTest.quiz.id, token);
    if (!smsTest) {
      console.log('‚ùå SISTEMA N√ÉO APROVADO - Falha na cria√ß√£o de campanha SMS');
      return;
    }

    // Teste 3: Detec√ß√£o de pa√≠ses
    const paisesTest = await testeDeteccaoPaises(token);
    if (!paisesTest) {
      console.log('‚ùå SISTEMA N√ÉO APROVADO - Falha na detec√ß√£o de pa√≠ses');
      return;
    }

    // Teste 4: Analytics
    const analyticsTest = await testeAnalytics(token);
    if (!analyticsTest) {
      console.log('‚ùå SISTEMA N√ÉO APROVADO - Falha nos analytics');
      return;
    }

    // Resultado final
    console.log('\nüéâ RESULTADO FINAL DA VALIDA√á√ÉO');
    console.log('================================');
    console.log('‚úÖ SISTEMA COMPLETAMENTE OPERACIONAL!');
    console.log('‚úÖ Quiz responses funcionando');
    console.log('‚úÖ Campanhas SMS funcionando');
    console.log('‚úÖ Detec√ß√£o de pa√≠ses funcionando');
    console.log('‚úÖ Analytics funcionando');
    console.log('‚úÖ SISTEMA APROVADO PARA PRODU√á√ÉO!');
    
  } catch (error) {
    console.error('‚ùå Erro na valida√ß√£o completa:', error.message);
  }
}

// Executar valida√ß√£o
executarValidacaoCompleta().catch(console.error);