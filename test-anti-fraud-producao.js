#!/usr/bin/env node

/**
 * TESTE ANTI-BURLA PARA PRODU√á√ÉO
 * Teste usando usu√°rio admin real do sistema
 */

import jwt from 'jsonwebtoken';
import fetch from 'node-fetch';

const JWT_SECRET = process.env.JWT_SECRET || 'vendzz-jwt-secret-key-2024';
const BASE_URL = 'http://localhost:5000';

// Usar usu√°rio admin real do sistema
const ADMIN_USER_ID = '1EaY6vE0rYAkTXv5vHClm';

// Fun√ß√£o para gerar token JWT para usu√°rio admin
function generateToken(userId) {
  return jwt.sign(
    { 
      userId,
      id: userId,
      email: 'admin@vendzz.com',
      role: 'admin',
      plan: 'enterprise'
    }, 
    JWT_SECRET, 
    { expiresIn: '1h' }
  );
}

// Fun√ß√£o para fazer requisi√ß√£o autenticada
async function makeRequest(endpoint, options = {}) {
  const token = generateToken(ADMIN_USER_ID);
  
  const response = await fetch(`${BASE_URL}${endpoint}`, {
    headers: {
      'Authorization': `Bearer ${token}`,
      'Content-Type': 'application/json',
      'User-Agent': 'Antifraud-Production-Test/1.0',
      ...options.headers
    },
    ...options
  });

  const data = await response.json();
  return { response, data };
}

// Teste completo do sistema anti-burla
async function testAntifraudProduction() {
  console.log('üîê INICIANDO TESTE ANTI-BURLA PRODU√á√ÉO');
  console.log('=' * 60);
  
  const startTime = Date.now();
  let totalTests = 0;
  let passedTests = 0;
  
  // Teste 1: Valida√ß√£o de cr√©ditos SMS
  console.log('\nüì± TESTE 1: VALIDA√á√ÉO SMS');
  try {
    const { response, data } = await makeRequest('/api/credits/validate', {
      method: 'POST',
      body: JSON.stringify({ type: 'sms', amount: 1 })
    });
    
    totalTests++;
    if (response.status === 200 && data.valid !== undefined) {
      passedTests++;
      console.log(`‚úÖ SMS Validation: ${data.valid ? 'V√ÅLIDO' : 'INV√ÅLIDO'} - ${data.remaining || 0} cr√©ditos`);
    } else {
      console.log(`‚ùå SMS Validation: Erro - ${JSON.stringify(data)}`);
    }
  } catch (error) {
    console.log(`‚ùå SMS Validation: Erro - ${error.message}`);
  }
  
  // Teste 2: Cr√©ditos SMS dispon√≠veis
  console.log('\nüí∞ TESTE 2: CR√âDITOS SMS');
  try {
    const { response, data } = await makeRequest('/api/sms-credits');
    
    totalTests++;
    if (response.status === 200) {
      passedTests++;
      console.log(`‚úÖ SMS Credits: ${data.remaining || 0} dispon√≠veis, Plan: ${data.plan || 'N/A'}`);
    } else {
      console.log(`‚ùå SMS Credits: Erro - ${JSON.stringify(data)}`);
    }
  } catch (error) {
    console.log(`‚ùå SMS Credits: Erro - ${error.message}`);
  }
  
  // Teste 3: Sistema completo anti-burla
  console.log('\nüîí TESTE 3: SISTEMA COMPLETO');
  try {
    const { response, data } = await makeRequest('/api/anti-fraud/test', {
      method: 'POST',
      body: JSON.stringify({ testType: 'comprehensive' })
    });
    
    totalTests++;
    if (response.status === 200 && data.score !== undefined) {
      passedTests++;
      console.log(`‚úÖ Anti-Fraud: Score ${data.score}% (${data.passCount}/${data.totalTests})`);
      console.log(`   Status: ${data.status}`);
      
      // Detalhar resultados
      if (data.results) {
        for (const [category, result] of Object.entries(data.results)) {
          console.log(`   ${category.toUpperCase()}: ${result.status || 'N/A'}`);
        }
      }
    } else {
      console.log(`‚ùå Anti-Fraud: Erro - ${JSON.stringify(data)}`);
    }
  } catch (error) {
    console.log(`‚ùå Anti-Fraud: Erro - ${error.message}`);
  }
  
  // Teste 4: Auditoria
  console.log('\nüìä TESTE 4: AUDITORIA');
  try {
    const { response, data } = await makeRequest('/api/credits/audit?days=30');
    
    totalTests++;
    if (response.status === 200) {
      passedTests++;
      console.log(`‚úÖ Audit: ${data.totalTransactions || 0} transa√ß√µes nos √∫ltimos 30 dias`);
      console.log(`   Usu√°rio: ${data.userId || 'N/A'}`);
      console.log(`   Per√≠odo: ${data.period || 'N/A'}`);
    } else {
      console.log(`‚ùå Audit: Erro - ${JSON.stringify(data)}`);
    }
  } catch (error) {
    console.log(`‚ùå Audit: Erro - ${error.message}`);
  }
  
  // Teste 5: Integra√ß√£o Stripe
  console.log('\nüí≥ TESTE 5: STRIPE INTEGRATION');
  try {
    const { response, data } = await makeRequest('/api/stripe/customer', {
      method: 'POST'
    });
    
    totalTests++;
    if (response.status === 200 || (response.status === 400 && data.error?.includes('Stripe n√£o est√° configurado'))) {
      passedTests++;
      if (data.customerId) {
        console.log(`‚úÖ Stripe Customer: ${data.customerId}`);
      } else {
        console.log(`‚ö†Ô∏è  Stripe Customer: ${data.error || 'Stripe n√£o configurado'}`);
      }
    } else {
      console.log(`‚ùå Stripe Customer: Erro - ${JSON.stringify(data)}`);
    }
  } catch (error) {
    console.log(`‚ùå Stripe Customer: Erro - ${error.message}`);
  }
  
  // Calcular resultados finais
  const endTime = Date.now();
  const duration = endTime - startTime;
  const successRate = Math.round((passedTests / totalTests) * 100);
  
  console.log('\n' + '=' * 60);
  console.log(`üéØ RESULTADOS FINAIS`);
  console.log(`   Tempo: ${duration}ms`);
  console.log(`   Testes: ${passedTests}/${totalTests} aprovados`);
  console.log(`   Taxa de sucesso: ${successRate}%`);
  console.log(`   Status: ${successRate >= 80 ? '‚úÖ APROVADO' : '‚ùå REPROVADO'}`);
  
  if (successRate >= 80) {
    console.log('\nüîí SISTEMA ANTI-BURLA OPERACIONAL PARA PRODU√á√ÉO!');
  } else {
    console.log('\n‚ö†Ô∏è  SISTEMA PRECISA DE AJUSTES ANTES DA PRODU√á√ÉO');
  }
  
  return { passedTests, totalTests, successRate, duration };
}

// Executar teste se chamado diretamente
if (import.meta.url === `file://${process.argv[1]}`) {
  testAntifraudProduction().then(result => {
    process.exit(result.successRate >= 80 ? 0 : 1);
  }).catch(error => {
    console.error('‚ùå ERRO CR√çTICO:', error);
    process.exit(1);
  });
}

export { testAntifraudProduction };