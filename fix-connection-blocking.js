/**
 * SCRIPT PARA CORRIGIR PROBLEMAS DE CONEX√ÉO BLOQUEADA
 * Testa e resolve ERR_BLOCKED_BY_RESPONSE
 */

console.log('üîç Diagnosticando problema de conex√£o bloqueada...');

// Fun√ß√£o para testar conex√£o
async function testConnection() {
  try {
    const response = await fetch('/api/health');
    const data = await response.json();
    console.log('‚úÖ Conex√£o API funcionando:', data);
    return true;
  } catch (error) {
    console.error('‚ùå Erro na conex√£o API:', error.message);
    return false;
  }
}

// Fun√ß√£o para verificar Service Worker
function checkServiceWorker() {
  if ('serviceWorker' in navigator) {
    navigator.serviceWorker.getRegistrations().then(registrations => {
      if (registrations.length > 0) {
        console.log('üîÑ Service Worker encontrado, removendo...');
        registrations.forEach(registration => {
          registration.unregister().then(() => {
            console.log('‚úÖ Service Worker removido');
          });
        });
      } else {
        console.log('‚ÑπÔ∏è Nenhum Service Worker registrado');
      }
    });
  }
}

// Fun√ß√£o para limpar cache
function clearBrowserCache() {
  if ('caches' in window) {
    caches.keys().then(cacheNames => {
      if (cacheNames.length > 0) {
        console.log('üßπ Limpando caches:', cacheNames);
        Promise.all(
          cacheNames.map(cacheName => caches.delete(cacheName))
        ).then(() => {
          console.log('‚úÖ Todos os caches limpos');
        });
      } else {
        console.log('‚ÑπÔ∏è Nenhum cache encontrado');
      }
    });
  }
}

// Executar diagn√≥stico
async function runDiagnostic() {
  console.log('üìä Iniciando diagn√≥stico completo...');
  
  // 1. Testar conex√£o b√°sica
  const connectionOk = await testConnection();
  
  // 2. Verificar e remover Service Worker se necess√°rio
  checkServiceWorker();
  
  // 3. Limpar caches
  clearBrowserCache();
  
  // 4. Aguardar e testar novamente
  setTimeout(async () => {
    console.log('üîÑ Testando conex√£o ap√≥s limpeza...');
    const secondTest = await testConnection();
    
    if (secondTest) {
      console.log('‚úÖ PROBLEMA RESOLVIDO: Conex√£o funcionando normalmente');
      console.log('üí° Recomenda√ß√£o: Recarregue a p√°gina (F5) para aplicar as corre√ß√µes');
    } else {
      console.log('‚ö†Ô∏è Problema persiste. Poss√≠veis causas:');
      console.log('   1. Firewall ou antiv√≠rus bloqueando');
      console.log('   2. Configura√ß√£o de rede corporativa');
      console.log('   3. Proxy ou VPN interferindo');
      console.log('   4. Headers de seguran√ßa muito restritivos');
    }
  }, 2000);
}

// Executar
runDiagnostic();