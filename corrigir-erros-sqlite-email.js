/**
 * CORRE√á√ÉO CR√çTICA - SQLite Parameter Binding Errors no Email Marketing
 * Identifica e corrige o erro "Too few parameter values were provided"
 */

import Database from 'better-sqlite3';
import fs from 'fs';

async function corrigirErrorsEmail() {
  console.log('üîß CORRE√á√ÉO CR√çTICA: SQLite Parameter Binding Errors');
  console.log('====================================================');

  let db;
  try {
    // Conectar ao banco
    db = new Database('./database.db');
    console.log('‚úÖ Conectado ao banco SQLite');

    // 1. DIAGN√ìSTICO: Verificar campanhas de email problem√°ticas
    console.log('\nüîç 1. DIAGN√ìSTICO DAS CAMPANHAS PROBLEM√ÅTICAS');
    const campaignsWithErrors = db.prepare(`
      SELECT id, name, quizId, status, subject, content, createdAt
      FROM email_campaigns 
      WHERE name IN (
        'Teste Detec√ß√£o Autom√°tica',
        'Teste Final Sistema Email Marketing', 
        'TESTE SENIOR DEV - Email Real'
      )
    `).all();

    console.log(`üìß Campanhas encontradas: ${campaignsWithErrors.length}`);
    campaignsWithErrors.forEach(campaign => {
      console.log(`   - ${campaign.name} (ID: ${campaign.id})`);
      console.log(`     Quiz: ${campaign.quizId}, Status: ${campaign.status}`);
    });

    // 2. VERIFICA√á√ÉO: Estrutura da tabela email_logs
    console.log('\nüîç 2. VERIFICA√á√ÉO DA ESTRUTURA email_logs');
    try {
      const tableInfo = db.prepare(`PRAGMA table_info(email_logs)`).all();
      console.log('üìã Campos da tabela email_logs:');
      tableInfo.forEach(field => {
        console.log(`   - ${field.name}: ${field.type} ${field.notnull ? '(NOT NULL)' : '(NULLABLE)'}`);
      });
    } catch (error) {
      console.log('‚ùå Erro ao verificar estrutura da tabela:', error.message);
    }

    // 3. VERIFICA√á√ÉO: Logs de email existentes  
    console.log('\nüîç 3. VERIFICA√á√ÉO DE LOGS EXISTENTES');
    try {
      const existingLogs = db.prepare(`
        SELECT campaignId, email, status, COUNT(*) as count
        FROM email_logs 
        GROUP BY campaignId, status
        ORDER BY campaignId
      `).all();
      
      console.log(`üìä Logs existentes: ${existingLogs.length} grupos`);
      existingLogs.slice(0, 5).forEach(log => {
        console.log(`   - Campanha ${log.campaignId}: ${log.count} logs com status '${log.status}'`);
      });
    } catch (error) {
      console.log('‚ùå Erro ao verificar logs:', error.message);
    }

    // 4. AN√ÅLISE: Responses do quiz problem√°tico
    console.log('\nüîç 4. AN√ÅLISE DO QUIZ Qm4wxpfPgkMrwoMhDFNLZ');
    try {
      const quizResponses = db.prepare(`
        SELECT id, responses, metadata, submittedAt
        FROM quiz_responses 
        WHERE quizId = 'Qm4wxpfPgkMrwoMhDFNLZ'
        LIMIT 5
      `).all();
      
      console.log(`üìä Respostas encontradas: ${quizResponses.length}`);
      quizResponses.forEach((response, index) => {
        const responsesData = JSON.parse(response.responses || '{}');
        const email = responsesData.email;
        console.log(`   ${index + 1}. ID: ${response.id.substring(0, 8)}... Email: ${email || 'N/A'}`);
      });
    } catch (error) {
      console.log('‚ùå Erro ao verificar respostas do quiz:', error.message);
    }

    // 5. SOLU√á√ÉO: Testar cria√ß√£o de log com dados corretos
    console.log('\nüîß 5. TESTE DE CRIA√á√ÉO DE LOG CORRIGIDO');
    try {
      const testLog = {
        id: 'test_' + Date.now(),
        campaignId: campaignsWithErrors[0]?.id || 'test_campaign',
        email: 'teste@vendzz.com',
        personalizedSubject: 'Teste Assunto',
        personalizedContent: 'Teste Conte√∫do',
        leadData: '{"nome": "Teste", "email": "teste@vendzz.com"}',
        status: 'pending',
        sendgridId: null,
        errorMessage: null,
        sentAt: null,
        deliveredAt: null,
        openedAt: null,
        clickedAt: null,
        scheduledAt: null,
        createdAt: Math.floor(Date.now() / 1000)
      };

      const insertStmt = db.prepare(`
        INSERT INTO email_logs (
          id, campaignId, email, personalizedSubject, personalizedContent,
          leadData, status, sendgridId, errorMessage, sentAt, deliveredAt,
          openedAt, clickedAt, scheduledAt, createdAt
        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
      `);

      const result = insertStmt.run(
        testLog.id, testLog.campaignId, testLog.email,
        testLog.personalizedSubject, testLog.personalizedContent,
        testLog.leadData, testLog.status, testLog.sendgridId,
        testLog.errorMessage, testLog.sentAt, testLog.deliveredAt,
        testLog.openedAt, testLog.clickedAt, testLog.scheduledAt,
        testLog.createdAt
      );

      console.log('‚úÖ Teste de cria√ß√£o de log bem-sucedido!');
      console.log(`   ID inserido: ${result.lastInsertRowid}`);

      // Remover log de teste
      db.prepare('DELETE FROM email_logs WHERE id = ?').run(testLog.id);
      console.log('üßπ Log de teste removido');

    } catch (error) {
      console.log('‚ùå ERRO no teste de cria√ß√£o:', error.message);
      console.log('üí° Este √© provavelmente o problema que causa "Too few parameter values"');
    }

    // 6. CORRE√á√ÉO: Pausar campanhas problem√°ticas temporariamente
    console.log('\nüîß 6. PAUSANDO CAMPANHAS PROBLEM√ÅTICAS');
    try {
      const pauseResult = db.prepare(`
        UPDATE email_campaigns 
        SET status = 'paused'
        WHERE name IN (
          'Teste Detec√ß√£o Autom√°tica',
          'Teste Final Sistema Email Marketing', 
          'TESTE SENIOR DEV - Email Real'
        ) AND status = 'active'
      `).run();

      console.log(`‚úÖ ${pauseResult.changes} campanhas pausadas para corre√ß√£o`);
    } catch (error) {
      console.log('‚ùå Erro ao pausar campanhas:', error.message);
    }

    console.log('\nüéØ DIAGN√ìSTICO COMPLETO');
    console.log('=======================');
    console.log('‚úÖ Sistema de fluxo: Erro corrigido (setFlowEnabled ‚Üí handleEnableFlow)');
    console.log('‚ö†Ô∏è Sistema de email: Campanhas pausadas para corre√ß√£o');
    console.log('üìß Pr√≥ximo passo: Corrigir fun√ß√£o createEmailLog no storage-sqlite.ts');
    console.log('üîÑ Loops infinitos: Campanhas pausadas temporariamente');

  } catch (error) {
    console.error('‚ùå Erro geral:', error);
  } finally {
    if (db) {
      db.close();
      console.log('üîå Conex√£o com banco fechada');
    }
  }
}

// Executar corre√ß√£o
corrigirErrorsEmail().catch(console.error);