import fetch from 'node-fetch';

async function verificarTelefones() {
  try {
    console.log('üìû VERIFICANDO TELEFONES DISPON√çVEIS PARA AUTOMA√á√ÉO\n');
    
    // Login
    const loginResponse = await fetch('https://51f74588-7b5b-4e89-adab-b70610c96e0b-00-zr6ug9hu0yss.janeway.replit.dev/api/auth/login', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ email: 'admin@vendzz.com', password: 'admin123' })
    });

    const { accessToken } = await loginResponse.json();
    console.log('‚úÖ Login realizado');
    
    // Buscar arquivos
    const filesResponse = await fetch('https://51f74588-7b5b-4e89-adab-b70610c96e0b-00-zr6ug9hu0yss.janeway.replit.dev/api/whatsapp-automation-files', {
      headers: { 'Authorization': `Bearer ${accessToken}` }
    });
    
    const files = await filesResponse.json();
    console.log(`üìÅ ${files.length} arquivos encontrados\n`);
    
    // Verificar telefones em cada arquivo
    for (const file of files) {
      if (file.total_phones > 0) {
        console.log(`üìÇ ARQUIVO: ${file.quiz_title} - ${file.target_audience}`);
        console.log(`   üìä Total de telefones: ${file.total_phones}`);
        
        // Carregar contatos do arquivo
        const contactsResponse = await fetch(`https://51f74588-7b5b-4e89-adab-b70610c96e0b-00-zr6ug9hu0yss.janeway.replit.dev/api/whatsapp-automation-files/${file.id}`, {
          headers: { 'Authorization': `Bearer ${accessToken}` }
        });
        
        const contactsData = await contactsResponse.json();
        
        if (contactsData.contacts && contactsData.contacts.length > 0) {
          contactsData.contacts.forEach((contact, index) => {
            // Validar formato do telefone
            const phone = contact.phone;
            const cleanPhone = phone.replace(/\D/g, '');
            
            let validation = '‚úÖ V√ÅLIDO';
            let format = 'Padr√£o brasileiro';
            
            if (cleanPhone.length < 10 || cleanPhone.length > 15) {
              validation = '‚ùå INV√ÅLIDO (tamanho)';
            } else if (cleanPhone.length === 11 && cleanPhone.startsWith('11')) {
              format = 'Celular SP (11)';
            } else if (cleanPhone.length === 11 && cleanPhone.startsWith('21')) {
              format = 'Celular RJ (21)';
            } else if (cleanPhone.length === 10) {
              format = 'Fixo brasileiro';
            } else if (cleanPhone.length === 13 && cleanPhone.startsWith('55')) {
              format = 'Com c√≥digo pa√≠s (+55)';
            }
            
            console.log(`   üì± ${index + 1}. ${phone} ‚Üí ${cleanPhone} (${format}) ${validation}`);
            console.log(`      üë§ ${contact.nome || 'Sem nome'} - ${contact.status || 'Sem status'}`);
            
            // Simular formata√ß√£o que ser√° usada na extens√£o
            let formattedPhone = cleanPhone;
            if (cleanPhone.length === 11 && (cleanPhone.startsWith('11') || cleanPhone.startsWith('21'))) {
              formattedPhone = `55${cleanPhone}`;
            }
            console.log(`      üîÑ Formato final: +${formattedPhone}`);
            console.log('');
          });
        }
        console.log('‚îÄ'.repeat(60));
      }
    }
    
    console.log('\nüìã RESUMO DA VALIDA√á√ÉO:');
    console.log('‚úÖ Telefones brasileiros (11 d√≠gitos): Ser√£o formatados como +5511XXXXXXXXX');
    console.log('‚úÖ Telefones com c√≥digo pa√≠s (13 d√≠gitos): Mantidos como est√£o');
    console.log('‚úÖ Outros formatos: Tentativa autom√°tica com +55');
    
    console.log('\nüöÄ PR√ìXIMOS PASSOS:');
    console.log('1. A extens√£o validar√° automaticamente cada telefone');
    console.log('2. Telefones inv√°lidos ser√£o pulados com log de erro');
    console.log('3. Telefones v√°lidos tentar√£o abrir conversa no WhatsApp');
    console.log('4. Se a conversa abrir, a mensagem ser√° enviada');
    
    console.log('\n‚ö†Ô∏è IMPORTANTE:');
    console.log('‚Ä¢ A extens√£o tentar√° m√∫ltiplos formatos para cada telefone');
    console.log('‚Ä¢ Logs detalhados aparecer√£o no console do navegador');
    console.log('‚Ä¢ Teste primeiro com um telefone conhecido seu');
    
  } catch (error) {
    console.error('‚ùå Erro:', error.message);
  }
}

verificarTelefones();