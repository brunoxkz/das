#!/usr/bin/env node

/**
 * DEBUG ESPEC√çFICO - VERIFICAR CORRE√á√ÉO DA INTERPOLA√á√ÉO
 * =====================================================
 * 
 * Verifica se a interpola√ß√£o dupla foi corrigida corretamente
 */

const fs = require('fs');

const content = fs.readFileSync('client/src/components/page-editor-horizontal.tsx', 'utf8');

// Procurar especificamente pelo elemento m√©trica
const metricsSection = content.match(/case "metrics":(.*?)(?=case "|default:)/s);

if (metricsSection) {
  console.log('üîç VERIFICANDO ELEMENTO M√âTRICA');
  console.log('==============================\n');
  
  const metricsCode = metricsSection[1];
  
  // Procurar por interpola√ß√µes duplas no c√≥digo de m√©trica
  const doubleInterpolations = metricsCode.match(/style=\{\{[^}]+\}\}/g);
  
  if (doubleInterpolations) {
    console.log('‚ùå INTERPOLA√á√ïES DUPLAS ENCONTRADAS NO ELEMENTO M√âTRICA:');
    doubleInterpolations.forEach((match, index) => {
      console.log(`${index + 1}. ${match}`);
    });
  } else {
    console.log('‚úÖ NENHUMA INTERPOLA√á√ÉO DUPLA ENCONTRADA NO ELEMENTO M√âTRICA');
  }
  
  // Procurar por interpola√ß√µes simples corretas
  const correctInterpolations = metricsCode.match(/style=\{[^{][^}]*\}/g);
  
  if (correctInterpolations) {
    console.log('\n‚úÖ INTERPOLA√á√ïES CORRETAS ENCONTRADAS:');
    correctInterpolations.forEach((match, index) => {
      console.log(`${index + 1}. ${match}`);
    });
  }
  
  // Procurar por vari√°veis undefined
  const undefinedVars = metricsCode.match(/\b(var_[a-zA-Z_]+)\b/g);
  
  if (undefinedVars) {
    console.log('\n‚ùå VARI√ÅVEIS UNDEFINED ENCONTRADAS:');
    undefinedVars.forEach((match, index) => {
      console.log(`${index + 1}. ${match}`);
    });
  } else {
    console.log('\n‚úÖ NENHUMA VARI√ÅVEL UNDEFINED ENCONTRADA');
  }
  
  // Verificar se TrendingUp est√° sendo usado
  const trendingUpUsage = metricsCode.includes('TrendingUp');
  console.log(`\nüìä TrendingUp usado: ${trendingUpUsage ? '‚úÖ Sim' : '‚ùå N√£o'}`);
  
  // Verificar se h√° erros √≥bvios de sintaxe
  const syntaxErrors = [];
  
  // Verificar chaves desbalanceadas
  const openBraces = (metricsCode.match(/\{/g) || []).length;
  const closeBraces = (metricsCode.match(/\}/g) || []).length;
  
  if (openBraces !== closeBraces) {
    syntaxErrors.push(`Chaves desbalanceadas: ${openBraces} abertas, ${closeBraces} fechadas`);
  }
  
  // Verificar par√™nteses desbalanceados
  const openParens = (metricsCode.match(/\(/g) || []).length;
  const closeParens = (metricsCode.match(/\)/g) || []).length;
  
  if (openParens !== closeParens) {
    syntaxErrors.push(`Par√™nteses desbalanceados: ${openParens} abertas, ${closeParens} fechadas`);
  }
  
  if (syntaxErrors.length > 0) {
    console.log('\n‚ùå ERROS DE SINTAXE ENCONTRADOS:');
    syntaxErrors.forEach((error, index) => {
      console.log(`${index + 1}. ${error}`);
    });
  } else {
    console.log('\n‚úÖ NENHUM ERRO DE SINTAXE √ìBVIO ENCONTRADO');
  }
  
  console.log('\nüìù RESUMO:');
  console.log('==========');
  console.log(`‚úÖ Interpola√ß√µes duplas: ${doubleInterpolations ? doubleInterpolations.length : 0}`);
  console.log(`‚úÖ Interpola√ß√µes corretas: ${correctInterpolations ? correctInterpolations.length : 0}`);
  console.log(`‚úÖ Vari√°veis undefined: ${undefinedVars ? undefinedVars.length : 0}`);
  console.log(`‚úÖ TrendingUp usado: ${trendingUpUsage ? 'Sim' : 'N√£o'}`);
  console.log(`‚úÖ Erros de sintaxe: ${syntaxErrors.length}`);
  
  if (doubleInterpolations || undefinedVars || syntaxErrors.length > 0) {
    console.log('\n‚ö†Ô∏è  PROBLEMAS ENCONTRADOS - ELEMENTO M√âTRICA PODE N√ÉO FUNCIONAR');
  } else {
    console.log('\nüéØ ELEMENTO M√âTRICA DEVE FUNCIONAR CORRETAMENTE');
  }
  
} else {
  console.log('‚ùå ELEMENTO M√âTRICA N√ÉO ENCONTRADO NO C√ìDIGO');
}