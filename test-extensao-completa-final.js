/**
 * TESTE COMPLETO DA EXTENS√ÉO CHROME - VALIDA√á√ÉO FINAL
 * Verifica todas as funcionalidades essenciais
 */

const PUBLIC_URL = 'https://51f74588-7b5b-4e89-adab-b70610c96e0b-00-zr6ug9hu0yss.janeway.replit.dev';

async function apiRequest(endpoint, options = {}) {
  const url = `${PUBLIC_URL}${endpoint}`;
  const config = {
    headers: {
      'Content-Type': 'application/json',
      'Origin': 'chrome-extension://fake-extension-id',
      ...options.headers
    },
    ...options
  };

  const response = await fetch(url, config);
  const data = await response.json();
  
  return { response, data };
}

async function authenticate() {
  console.log('üîê 1. Testando autentica√ß√£o...');
  
  const { response, data } = await apiRequest('/api/auth/login', {
    method: 'POST',
    body: JSON.stringify({
      email: 'admin@vendzz.com',
      password: 'admin123'
    })
  });
  
  if (!response.ok) {
    throw new Error(`Login falhou: ${data.message}`);
  }
  
  console.log(`‚úÖ Login bem-sucedido`);
  return data.accessToken;
}

async function gerarTokenExtensao(token) {
  console.log('üé´ 2. Gerando token da extens√£o...');
  
  const { response, data } = await apiRequest('/api/whatsapp/extension-token', {
    method: 'POST',
    headers: { 'Authorization': `Bearer ${token}` },
    body: JSON.stringify({ purpose: 'chrome_extension' })
  });
  
  if (!response.ok) {
    throw new Error(`Token extens√£o falhou: ${data.message}`);
  }
  
  console.log(`‚úÖ Token da extens√£o gerado`);
  console.log(`‚úÖ V√°lido at√©: ${new Date(data.expiresAt).toLocaleString()}`);
  return data.token;
}

async function testarListaQuizzes(extensionToken) {
  console.log('üìù 3. Testando lista de quizzes...');
  
  // Usar token de usu√°rio normal para listar quizzes
  const userToken = await authenticate();
  
  const { response, data } = await apiRequest('/api/quizzes', {
    headers: { 'Authorization': `Bearer ${userToken}` }
  });
  
  if (!response.ok) {
    throw new Error(`Lista quizzes falhou: ${data.message}`);
  }
  
  console.log(`‚úÖ ${data.length} quizzes encontrados`);
  
  if (data.length > 0) {
    console.log(`‚úÖ Quiz exemplo: "${data[0].title}" (${data[0].id})`);
    return data[0];
  }
  
  return null;
}

async function testarTelefonesQuiz(extensionToken, quiz) {
  console.log('üì± 4. Testando telefones do quiz...');
  
  const { response, data } = await apiRequest('/api/extension/quiz-data', {
    method: 'POST',
    headers: { 'Authorization': `Bearer ${extensionToken}` },
    body: JSON.stringify({
      quizId: quiz.id,
      targetAudience: 'all'
    })
  });
  
  if (!response.ok) {
    throw new Error(`Telefones falhou: ${data.message}`);
  }
  
  console.log(`‚úÖ ${data.phones?.length || 0} telefones encontrados`);
  console.log(`‚úÖ Dados em tempo real: ${data.realTimeData}`);
  console.log(`‚úÖ Cache timestamp: ${new Date(data.timestamp).toLocaleString()}`);
  
  return data.phones || [];
}

async function testarFiltroData(extensionToken, quiz) {
  console.log('üìÖ 5. Testando filtro por data...');
  
  const today = new Date().toISOString().split('T')[0];
  
  const { response, data } = await apiRequest('/api/extension/quiz-data', {
    method: 'POST',
    headers: { 'Authorization': `Bearer ${extensionToken}` },
    body: JSON.stringify({
      quizId: quiz.id,
      targetAudience: 'all',
      dateFilter: today
    })
  });
  
  if (!response.ok) {
    throw new Error(`Filtro data falhou: ${data.message}`);
  }
  
  console.log(`‚úÖ Filtro por data (${today}): ${data.phones?.length || 0} telefones`);
  return data.phones || [];
}

async function testarCriacaoCampanha(extensionToken, quiz, phoneData) {
  console.log('üöÄ 6. Testando cria√ß√£o de campanha...');
  
  const campaignData = {
    name: `Teste Autom√°tico ${Date.now()}`,
    quizId: quiz.id,
    targetAudience: 'all',
    messages: [
      'Ol√°! Como voc√™ est√°?',
      'Vimos que voc√™ se interessou pelo nosso quiz.',
      'Que tal conversarmos mais sobre isso?',
      'Estamos aqui para ajudar!'
    ],
    triggerType: 'delayed',
    triggerDelay: 1,
    triggerUnit: 'minutes',
    messageInterval: 8,
    intervalUnit: 'seconds',
    workingHours: {
      start: '09:00',
      end: '18:00'
    },
    maxMessagesPerDay: 100
  };
  
  const { response, data } = await apiRequest('/api/whatsapp-campaigns', {
    method: 'POST',
    headers: { 'Authorization': `Bearer ${extensionToken}` },
    body: JSON.stringify(campaignData)
  });
  
  if (!response.ok) {
    throw new Error(`Cria√ß√£o campanha falhou: ${data.message}`);
  }
  
  console.log(`‚úÖ Campanha criada: ${data.campaign.name}`);
  console.log(`‚úÖ Status: ${data.campaign.status}`);
  console.log(`‚úÖ ${data.scheduledCount} mensagens agendadas`);
  
  return data.campaign;
}

async function testarDetecaoAutomatica(extensionToken) {
  console.log('üîÑ 7. Testando detec√ß√£o autom√°tica...');
  
  // Aguardar um pouco para simular detec√ß√£o
  await new Promise(resolve => setTimeout(resolve, 2000));
  
  const { response, data } = await apiRequest('/api/whatsapp/extension-status', {
    headers: { 'Authorization': `Bearer ${extensionToken}` }
  });
  
  if (!response.ok) {
    throw new Error(`Status extens√£o falhou: ${data.message}`);
  }
  
  console.log(`‚úÖ Conex√£o: ${data.isConnected ? 'Ativa' : 'Inativa'}`);
  console.log(`‚úÖ Status extens√£o: ${data.isActive ? 'Rodando' : 'Pausada'}`);
  console.log(`‚úÖ Telefones detectados: ${data.phoneCount || 0}`);
  
  return data;
}

async function testarStatusExtensao(extensionToken) {
  console.log('üìä 8. Testando status e estat√≠sticas...');
  
  const { response, data } = await apiRequest('/api/whatsapp/extension-status', {
    headers: { 'Authorization': `Bearer ${extensionToken}` }
  });
  
  if (!response.ok) {
    throw new Error(`Status falhou: ${data.message}`);
  }
  
  console.log(`‚úÖ √öltima sincroniza√ß√£o: ${data.lastSync || 'Nunca'}`);
  console.log(`‚úÖ Campanhas ativas: ${data.activeCampaigns || 0}`);
  console.log(`‚úÖ Mensagens enviadas: ${data.messagesSent || 0}`);
  
  return data;
}

async function executarTestesCompletos() {
  console.log('üéØ TESTE COMPLETO DA EXTENS√ÉO CHROME VENDZZ');
  console.log('============================================');
  console.log(`URL: ${PUBLIC_URL}`);
  console.log('');
  
  try {
    // 1. Autentica√ß√£o
    const userToken = await authenticate();
    
    // 2. Token da extens√£o
    const extensionToken = await gerarTokenExtensao(userToken);
    
    // 3. Lista de quizzes
    const quiz = await testarListaQuizzes(extensionToken);
    
    if (!quiz) {
      console.log('‚ö†Ô∏è Nenhum quiz encontrado para testar');
      return;
    }
    
    // 4. Telefones do quiz
    const phones = await testarTelefonesQuiz(extensionToken, quiz);
    
    // 5. Filtro por data
    await testarFiltroData(extensionToken, quiz);
    
    // 6. Cria√ß√£o de campanha
    await testarCriacaoCampanha(extensionToken, quiz, phones);
    
    // 7. Detec√ß√£o autom√°tica
    await testarDetecaoAutomatica(extensionToken);
    
    // 8. Status da extens√£o
    await testarStatusExtensao(extensionToken);
    
    console.log('');
    console.log('üéâ TODOS OS TESTES CONCLU√çDOS COM SUCESSO!');
    console.log('==========================================');
    console.log('‚úÖ Autentica√ß√£o funcionando');
    console.log('‚úÖ Token da extens√£o v√°lido');
    console.log('‚úÖ Lista de quizzes operacional');
    console.log('‚úÖ Filtros funcionais (audience + data)');
    console.log('‚úÖ Cria√ß√£o de campanhas autom√°tica');
    console.log('‚úÖ Detec√ß√£o de novos leads');
    console.log('‚úÖ Status e monitoramento');
    console.log('');
    console.log('üåê A extens√£o Chrome est√° PRONTA para uso externo!');
    console.log('üîó URL p√∫blica configurada e funcional');
    console.log('üì± Todas as funcionalidades validadas');
    
  } catch (error) {
    console.error('‚ùå ERRO NO TESTE:', error.message);
    console.error('üí° Verifique:', error.stack?.split('\n')[1] || 'N/A');
  }
}

// Executar testes
executarTestesCompletos();