
üìÑ Projeto: Anti-WebView ‚Äì Documenta√ß√£o T√©cnica Avan√ßada para Instala√ß√£o e Uso

---

## üîç Vis√£o Geral

Anti-WebView √© um m√≥dulo de redirecionamento avan√ßado que detecta acessos via navegador interno do Instagram (WebView) e for√ßa o carregamento da URL em um navegador externo nativo do sistema (Safari no iOS, Chrome no Android).

Esse comportamento √© essencial para funis de quiz e p√°ginas de vendas, pois melhora rastreamento, performance, convers√£o e persist√™ncia da sess√£o mesmo ap√≥s o usu√°rio fechar o Instagram.

---

## ‚úÖ Objetivo:

- Detectar acessos vindos do WebView do Instagram e Facebook
- Redirecionar automaticamente para navegador externo
- Preservar todos os par√¢metros UTM e de rastreamento, mesmo se o script estiver no <head>
- Garantir compatibilidade com pixels (Meta, Google, TikTok), que j√° est√£o presentes na p√°gina
- Prevenir loops, erros ou falhas visuais em qualquer sistema operacional
- Manter fallback silencioso (se n√£o funcionar, exibir p√°gina normalmente no WebView)

---

## üì¶ Estrutura necess√°ria:

1. Script JavaScript client-side
2. Endpoint backend opcional (/dummybytes) para fallback em Android e iOS antigo
3. Vari√°vel de ativa√ß√£o por quiz/usu√°rio (ex: openInBrowser = true)
4. Mecanismo de prote√ß√£o contra redirecionamento duplo (redirected=1)

---

## üß† Script JavaScript (client-side)

Este script pode ser inserido no <head> da p√°gina. Ele mant√©m todos os par√¢metros UTM da URL intactos e n√£o interfere no carregamento do pixel.

<script>
  const openInBrowser = true;

  const ua = navigator.userAgent.toLowerCase();
  const isInstagram = ua.includes('instagram');
  const isAndroid = ua.includes('android');
  const isIOS = /iphone|ipad|ipod/.test(ua);
  const iOSVersion = parseInt((ua.match(/os (\d+)_/i) || [])[1]) || 0;

  const url = new URL(window.location.href);
  const alreadyRedirected = url.searchParams.get('redirected') === '1';

  if (openInBrowser && isInstagram && !alreadyRedirected) {
    if (isIOS && iOSVersion >= 17) {
      const newUrl = `x-safari-${window.location.href}${window.location.search.includes('?') ? '&' : '?'}redirected=1`;
      window.location.href = newUrl;
    } else if (isAndroid || isIOS) {
      const encodedUrl = encodeURIComponent(window.location.href);
      window.location.href = `https://seudominio.com/dummybytes?target=${encodedUrl}`;
    }
  }
</script>

---

## üõ†Ô∏è Endpoint /dummybytes (Node.js/Express)

app.get('/dummybytes', (req, res) => {
  const targetUrl = decodeURIComponent(req.query.target || '');
  const ua = req.headers['user-agent']?.toLowerCase() || '';
  const isInstagram = ua.includes('instagram');

  if (isInstagram) {
    res.setHeader('Content-Disposition', 'attachment; filename=dummy.txt');
    res.setHeader('Content-Type', 'application/octet-stream');
    res.send('Forcing external browser...');
  } else {
    res.redirect(targetUrl || 'https://seudominio.com');
  }
});

---

## üß™ Compatibilidade de Sistemas

| Sistema       | Comportamento esperado              | Risco          | A√ß√£o recomendada                     |
|---------------|-------------------------------------|----------------|--------------------------------------|
| iOS 17+       | Redireciona via x-safari-          | Baixo          | Ativar normalmente                   |
| iOS < 17      | Usa dummybytes                     | Leve           | Funciona, mas menos suave            |
| Android 10+   | Usa dummybytes                     | Baixo          | Compat√≠vel                           |
| Android 6‚Äì9   | Pode falhar ou travar download      | M√©dio          | Detectar vers√£o e evitar redirect    |
| Android < 6   | Alta chance de erro/travamento      | Alto           | N√£o redirecionar                     |

---

## üîÑ O que acontece se n√£o funcionar?

- iOS < 17: fallback dummybytes √© chamado silenciosamente
- Android antigo: pode falhar ou travar, mas a p√°gina √© exibida normalmente
- Nenhum redirecionamento? P√°gina segue em WebView sem erro
- O pixel continuar√° carregando normalmente, pois o redirecionamento acontece antes de bloquear carregamentos e respeita o DOM

---

## üõ°Ô∏è Regras de seguran√ßa

- Nunca use replace(), pois pode causar quebra silenciosa
- Nunca remova UTMs: preserve todos os par√¢metros
- Nunca exiba bot√£o de fallback ‚Äì o script deve ser invis√≠vel
- Sempre usar HTTPS real (nunca localhost)
- Backend deve redirecionar silenciosamente se fora do WebView

---

## ‚úÖ Requisitos para ativa√ß√£o no SaaS

- Flag por quiz: openInBrowser = true
- Vari√°vel embutida no HTML din√¢mico
- Script e endpoint ativados apenas se a flag for verdadeira
- Pode ser inserido no <head> com total compatibilidade

---

## üìà Resultados esperados

- Melhora no CTR da p√°gina
- Aumento de tempo de perman√™ncia
- Diminui√ß√£o de perda de cookies e eventos
- Aumento das convers√µes com menor custo por aquisi√ß√£o
