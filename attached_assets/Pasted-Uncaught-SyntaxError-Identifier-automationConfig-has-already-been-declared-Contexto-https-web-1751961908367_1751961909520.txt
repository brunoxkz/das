Uncaught SyntaxError: Identifier 'automationConfig' has already been declared
Contexto
https://web.whatsapp.com/
Rastreio de pilha
content.js:555 (fun√ß√£o an√≥nima)
...
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
185
186
187
188
189
190
191
192
193
194
195
196
197
198
199
200
201
202
203
204
205
206
207
208
209
210
211
212
213
214
215
216
217
218
219
220
221
222
223
224
225
226
227
228
229
230
231
232
233
234
235
236
237
238
239
240
241
242
243
244
245
246
247
248
249
250
251
252
253
254
255
256
257
258
259
260
261
262
263
264
265
266
267
268
269
270
271
272
273
274
275
276
277
278
279
280
281
282
283
284
285
286
287
288
289
290
291
292
293
294
295
296
297
298
299
300
301
302
303
304
305
306
307
308
309
310
311
312
313
314
315
316
317
318
319
320
321
322
323
324
325
326
327
328
329
330
331
332
333
334
335
336
337
338
339
340
341
342
343
344
345
346
347
348
349
350
351
352
353
354
355
356
357
358
359
360
361
362
363
364
365
366
367
368
369
370
371
372
373
374
375
376
377
378
379
380
381
382
383
384
385
386
387
388
389
390
391
392
393
394
395
396
397
398
399
400
401
402
403
404
405
406
407
408
409
410
411
412
413
414
415
416
417
418
419
420
421
422
423
424
425
426
427
428
429
430
431
432
433
434
435
436
437
438
439
440
441
442
443
444
445
446
447
448
449
450
451
452
453
454
455
456
457
458
459
460
461
462
463
464
465
466
467
468
469
470
471
472
473
474
475
476
477
478
479
480
481
482
483
484
485
486
487
488
489
490
491
492
493
494
495
496
497
498
499
500
501
502
503
504
505
506
507
508
509
510
511
512
513
514
515
516
517
518
519
520
521
522
523
524
525
526
527
528
529
530
531
532
533
534
535
536
537
538
539
540
541
542
543
544
545
546
547
548
549
550
551
552
553
554
555
556
557
558
559
560
561
562
563
564
565
566
567
568
569
570
571
572
573
574
575
576
577
578
579
580
581
582
583
584
585
586
587
588
589
590
591
592
593
594
595
596
597
598
599
600
601
602
603
604
605
606
607
608
609
610
611
612
613
614
615
616
617
618
619
620
621
622
623
624
625
626
627
628
629
630
631
632
633
634
635
636
637
638
639
640
641
642
643
644
645
646
647
648
649
650
651
652
653
654
655
656
657
658
659
660
661
662
663
664
665
666
667
668
669
670
671
672
673
674
675
676
677
678
679
680
681
682
683
684
685
686
687
688
689
690
691
692
693
694
695
696
697
698
699
700
701
702
703
704
705
706
707
708
709
710
711
712
713
714
715
716
717
718
719
720
721
722
723
724
725
726
727
728
729
730
731
732
733
734
735
736
737
738
739
740
741
742
743
744
745
746
747
748
749
750
751
752
753
754
755
756
757
758
759
760
761
762
763
764
765
766
767
768
769
770
771
772
773
774
775
776
777
778
779
780
781
782
783
784
785
786
787
788
789
790
791
792
793
794
795
796
797
798
799
800
801
802
803
804
805
806
807
808
809
810
811
812
813
814
815
816
817
818
819
820
821
822
823
824
825
826
827
828
829
830
831
832
833
834
835
836
837
838
839
840
841
842
843
844
845
846
847
848
849
850
851
852
853
854
855
856
857
858
859
860
861
862
863
864
865
866
867
868
869
870
871
872
873
874
875
876
877
878
879
880
881
882
883
884
885
886
887
888
889
890
891
892
893
894
895
896
897
898
899
900
901
902
903
904
905
906
907
908
909
910
911
912
913
914
915
916
917
918
919
920
921
922
923
924
925
926
927
928
929
930
931
932
933
934
935
936
937
938
939
940
941
942
943
944
945
946
947
948
949
950
951
952
953
954
955
956
957
958
959
960
961
962
963
964
965
966
967
968
969
970
971
972
973
974
975
976
977
978
979
980
981
982
983
984
985
986
987
988
989
990
991
992
993
994
995
996
997
998
999
1000
1001
1002
1003
1004
1005
1006
1007
1008
1009
1010
1011
1012
1013
1014
1015
1016
1017
1018
1019
1020
1021
1022
1023
1024
1025
1026
1027
1028
1029
1030
1031
1032
1033
1034
1035
1036
1037
1038
1039
1040
1041
1042
1043
1044
1045
1046
1047
1048
1049
1050
1051
1052
1053
1054
...
<55 linhas n√£o apresentadas>
    '#side .copyable-text',
    '[data-testid="chatlist-search"]',
    '[role="application"]',
    '[data-testid="default-user"]',
    '._1Fm4j', // Header do chat
    '[data-testid="conversation-compose-box-input"]' // Input de mensagem
  ];
  
  // Verificar se pelo menos 2 seletores est√£o presentes para maior seguran√ßa
  const foundSelectors = selectors.filter(selector => document.querySelector(selector));
  const isLoaded = foundSelectors.length >= 2;
  
  if (isLoaded) {
    console.log(`‚úÖ WhatsApp detectado com ${foundSelectors.length} elementos encontrados`);
  }
  
  return isLoaded;
}

// Aguardar carregamento do WhatsApp
async function waitForWhatsAppLoad() {
  let attempts = 0;
  const maxAttempts = 60; // 60 segundos
  
  while (attempts < maxAttempts) {
    if (isWhatsAppLoaded()) {
      console.log('‚úÖ WhatsApp Web carregado');
      return true;
    }
    
    await new Promise(resolve => setTimeout(resolve, 1000));
    attempts++;
  }
  
  throw new Error('WhatsApp Web n√£o carregou em 60 segundos');
}

// Criar sidebar
function createSidebar() {
  if (sidebar) {
    console.log('‚úÖ Sidebar j√° existe, retornando...');
    return sidebar;
  }
  
  console.log('üé® Criando sidebar...');

  const sidebarHtml = `
    <div id="vendzz-sidebar" class="vendzz-sidebar">
      <div class="vendzz-header">
        <div class="vendzz-logo">
          <span class="vendzz-icon">ü§ñ</span>
          <span class="vendzz-title">Vendzz Automation</span>
        </div>
        <button id="vendzz-minimize" class="vendzz-btn-icon">‚àí</button>
      </div>
      
      <div class="vendzz-content">
        <div class="vendzz-section">
          <h3>üîê Configura√ß√£o</h3>
          <div class="vendzz-config">
            <input type="text" id="vendzz-server" placeholder="https://workspace--brunotamaso.replit.app" class="vendzz-input">
            <input type="password" id="vendzz-token" placeholder="Token de acesso" class="vendzz-input">
            <button id="vendzz-connect" class="vendzz-btn">Conectar</button>
          </div>
        </div>

        <div class="vendzz-section" id="vendzz-files-section" style="display: none;">
          <h3>üìÅ Arquivos de Automa√ß√£o</h3>
          <div class="vendzz-file-selector">
            <select id="vendzz-file-select" class="vendzz-select">
              <option value="">Selecione um arquivo</option>
            </select>
            <button id="vendzz-refresh-files" class="vendzz-btn-small">üîÑ</button>
          </div>
        </div>

        <div class="vendzz-section" id="vendzz-contacts-section" style="display: none;">
          <h3>üì± Contatos (<span id="vendzz-contact-count">0</span>)</h3>
          <div class="vendzz-contact-list" id="vendzz-contact-list">
            <!-- Contatos aparecer√£o aqui -->
          </div>
        </div>

        <div class="vendzz-section" id="vendzz-automation-section" style="display: none;">
          <h3>ü§ñ Automa√ß√£o de Mensagens</h3>
          
          <div class="vendzz-automation-config">
            <div class="vendzz-config-group">
              <label class="vendzz-label">üìÖ Filtro de Data (opcional):</label>
              <input type="date" id="vendzz-date-filter" class="vendzz-input">
              <small class="vendzz-help">Enviar para Leads que chegaram depois dessa data *evitar leads antigos</small>
            </div>

            <div class="vendzz-config-group">
              <label class="vendzz-checkbox-label">
                <input type="checkbox" id="vendzz-enable-completed" checked>
                <span class="vendzz-checkmark"></span>
                ‚úÖ Mensagens para Quiz Completo (4 rotativas anti-spam)
              </label>
              <div class="vendzz-message-rotation">
                <textarea id="vendzz-completed-message-1" class="vendzz-textarea" placeholder="Mensagem 1...">Ol√° {nome}! Obrigado por completar nosso quiz. Seus dados foram registrados com sucesso! üéâ</textarea>
                <textarea id="vendzz-completed-message-2" class="vendzz-textarea" placeholder="Mensagem 2...">Oi {nome}! Quiz finalizado! Em breve entraremos em contato com mais informa√ß√µes. ‚úÖ</textarea>
                <textarea id="vendzz-completed-message-3" class="vendzz-textarea" placeholder="Mensagem 3...">Parab√©ns {nome}! Voc√™ completou nosso quiz. Aguarde nosso retorno em breve. üöÄ</textarea>
                <textarea id="vendzz-completed-message-4" class="vendzz-textarea" placeholder="Mensagem 4...">Ol√° {nome}! Recebemos suas respostas do quiz. Nossa equipe entrar√° em contato logo! üìû</textarea>
              </div>
            </div>

            <div class="vendzz-config-group">
              <label class="vendzz-checkbox-label">
                <input type="checkbox" id="vendzz-enable-abandoned" checked>
                <span class="vendzz-checkmark"></span>
                ‚ö†Ô∏è Mensagens para Quiz Abandonado (4 rotativas anti-spam)
              </label>
              <div class="vendzz-message-rotation">
                <textarea id="vendzz-abandoned-message-1" class="vendzz-textarea" placeholder="Mensagem 1...">Oi {nome}! Notamos que voc√™ come√ßou nosso quiz mas n√£o finalizou. Que tal completar agora? ü§î</textarea>
                <textarea id="vendzz-abandoned-message-2" class="vendzz-textarea" placeholder="Mensagem 2...">Ol√° {nome}! Voc√™ estava quase terminando nosso quiz. Gostaria de finalizar suas respostas? ‚è∞</textarea>
                <textarea id="vendzz-abandoned-message-3" class="vendzz-textarea" placeholder="Mensagem 3...">Ei {nome}! Vimos que voc√™ iniciou nosso quiz. S√≥ faltam alguns passos para concluir! üìù</textarea>
                <textarea id="vendzz-abandoned-message-4" class="vendzz-textarea" placeholder="Mensagem 4...">Oi {nome}! Seu quiz ficou pela metade. Que tal terminar e receber nosso contato? üòä</textarea>
              </div>
            </div>

            <div class="vendzz-config-group">
              <label class="vendzz-label">‚è±Ô∏è Delay entre mensagens (segundos) - Anti-Ban 2025:</label>
              <input type="number" id="vendzz-message-delay" class="vendzz-input" value="25" min="15" max="60">
              <small class="vendzz-help">Recomendado: 25-45s (+ delay aleat√≥rio de 0-15s)</small>
            </div>

            <div class="vendzz-config-group">
              <label class="vendzz-label">üéØ Limite di√°rio (conservador):</label>
              <input type="number" id="vendzz-daily-limit" class="vendzz-input" value="50" min="10" max="200">
              <small class="vendzz-help">M√°ximo 50 mensagens/dia para evitar banimento</small>
            </div>

            <div class="vendzz-config-group">
              <label class="vendzz-label">‚è∞ M√°ximo por hora:</label>
              <input type="number" id="vendzz-hourly-limit" class="vendzz-input" value="8" min="3" max="15">
              <small class="vendzz-help">M√°ximo 8 mensagens/hora (pol√≠tica WhatsApp 2025)</small>
            </div>

            <div class="vendzz-anti-ban-warning">
              üõ°Ô∏è MODO ANTI-BAN 2025 ATIVADO<br>
              ‚Ä¢ 4+ mensagens rotativas evitam detec√ß√£o de spam<br>
              ‚Ä¢ Delays aleat√≥rios 25-40s simulam comportamento humano<br>
              ‚Ä¢ Limites conservadores protegem contra banimento
            </div>
          </div>

          <div class="vendzz-automation-controls">
            <button id="vendzz-start-automation" class="vendzz-btn vendzz-btn-primary">
              <span class="vendzz-btn-text">üöÄ Iniciar Automa√ß√£o</span>
            </button>
            <button id="vendzz-stop-automation" class="vendzz-btn vendzz-btn-danger" style="display: none;">
              <span class="vendzz-btn-text">‚èπÔ∏è Pausar Automa√ß√£o</span>
            </button>
          </div>

          <div class="vendzz-automation-stats" id="vendzz-automation-stats" style="display: none;">
            <div class="vendzz-stats-grid">
              <div class="vendzz-stat-item">
                <span class="vendzz-stat-number" id="vendzz-stats-sent">0</span>
                <span class="vendzz-stat-label">Enviadas</span>
              </div>
              <div class="vendzz-stat-item">
                <span class="vendzz-stat-number" id="vendzz-stats-failed">0</span>
                <span class="vendzz-stat-label">Falhas</span>
              </div>
              <div class="vendzz-stat-item">
                <span class="vendzz-stat-number" id="vendzz-stats-total">0</span>
                <span class="vendzz-stat-label">Total</span>
              </div>
            </div>
          </div>
        </div>

        <div class="vendzz-section">
          <h3>üìä Status</h3>
          <div class="vendzz-status" id="vendzz-status">
            <div class="vendzz-status-item">
              <span class="vendzz-status-label">Conex√£o:</span>
              <span class="vendzz-status-value" id="vendzz-connection-status">Desconectado</span>
            </div>
            <div class="vendzz-status-item">
              <span class="vendzz-status-label">Arquivo:</span>
              <span class="vendzz-status-value" id="vendzz-file-status">Nenhum</span>
            </div>
          </div>
        </div>

        <div class="vendzz-section">
          <h3>üìù Log</h3>
          <div class="vendzz-log" id="vendzz-log">
            <div class="vendzz-log-item">üöÄ Extens√£o carregada</div>
          </div>
        </div>
      </div>
    </div>
  `;

  try {
    // Inserir sidebar no DOM
    console.log('üìã Inserindo sidebar no DOM...');
    document.body.insertAdjacentHTML('beforeend', sidebarHtml);
    sidebar = document.getElementById('vendzz-sidebar');
    
    if (!sidebar) {
      console.error('‚ùå Falha ao encontrar sidebar ap√≥s inser√ß√£o');
      return null;
    }
    
    console.log('‚úÖ Sidebar inserida no DOM com sucesso');

    // Configurar event listeners
    console.log('üîß Configurando event listeners...');
    setupEventListeners();
    
    // Carregar configura√ß√£o
    console.log('‚öôÔ∏è Carregando configura√ß√£o...');
    loadConfig();
    
    console.log('‚úÖ Sidebar totalmente configurada');

    return sidebar;
  } catch (error) {
    console.error('‚ùå Erro ao criar sidebar:', error);
    return null;
  }
}

// Configurar event listeners
function setupEventListeners() {
  // Minimizar/Expandir
  document.getElementById('vendzz-minimize').addEventListener('click', () => {
    sidebar.classList.toggle('minimized');
  });

  // Conectar
  document.getElementById('vendzz-connect').addEventListener('click', connectToServer);

  // Seletor de arquivo
  document.getElementById('vendzz-file-select').addEventListener('change', loadSelectedFile);

  // Refresh arquivos
  document.getElementById('vendzz-refresh-files').addEventListener('click', loadFiles);

  // Controles de automa√ß√£o
  document.getElementById('vendzz-start-automation').addEventListener('click', startAutomation);
  document.getElementById('vendzz-stop-automation').addEventListener('click', stopAutomation);

  // Atualizar configura√ß√µes da automa√ß√£o quando mudarem
  document.getElementById('vendzz-date-filter').addEventListener('change', updateAutomationConfig);
  document.getElementById('vendzz-enable-completed').addEventListener('change', updateAutomationConfig);
  document.getElementById('vendzz-enable-abandoned').addEventListener('change', updateAutomationConfig);
  
  // Event listeners para mensagens rotativas
  for (let i = 1; i <= 4; i++) {
    document.getElementById(`vendzz-completed-message-${i}`).addEventListener('input', updateAutomationConfig);
    document.getElementById(`vendzz-abandoned-message-${i}`).addEventListener('input', updateAutomationConfig);
  }
  
  document.getElementById('vendzz-message-delay').addEventListener('change', updateAutomationConfig);
  document.getElementById('vendzz-daily-limit').addEventListener('change', updateAutomationConfig);
  document.getElementById('vendzz-hourly-limit').addEventListener('change', updateAutomationConfig);
}

// Carregar configura√ß√£o
async function loadConfig() {
  try {
    const response = await chrome.runtime.sendMessage({ action: 'get_config' });
    
    if (response.serverUrl) {
      document.getElementById('vendzz-server').value = response.serverUrl;
    }
    
    if (response.accessToken) {
      document.getElementById('vendzz-token').value = response.accessToken;
      await connectToServer();
    }
    
  } catch (error) {
    addLog('‚ùå Erro ao carregar configura√ß√£o');
  }
}

// Conectar ao servidor
async function connectToServer() {
  const serverUrl = document.getElementById('vendzz-server').value;
  const accessToken = document.getElementById('vendzz-token').value;

  if (!serverUrl || !accessToken) {
    addLog('‚ö†Ô∏è Preencha servidor e token');
    return;
  }

  addLog('üîÑ Testando conex√£o...');

  try {
    // Salvar configura√ß√£o
    await chrome.runtime.sendMessage({
      action: 'save_config',
      config: { serverUrl, accessToken }
    });

    // Testar conex√£o
    const response = await chrome.runtime.sendMessage({ action: 'test_connection' });
    
    if (response.success) {
      updateConnectionStatus('‚úÖ Conectado', 'connected');
      addLog(`‚úÖ Conectado como ${response.user.email}`);
      
      // Mostrar se√ß√µes de arquivos
      document.getElementById('vendzz-files-section').style.display = 'block';
      
      // Carregar arquivos
      await loadFiles();
      
      // Iniciar monitoramento
      await chrome.runtime.sendMessage({ action: 'start_monitoring' });
      
    } else {
      updateConnectionStatus('‚ùå Erro', 'error');
      addLog(`‚ùå Erro: ${response.error}`);
    }
    
  } catch (error) {
    updateConnectionStatus('‚ùå Erro', 'error');
    addLog(`‚ùå Erro de conex√£o: ${error.message}`);
  }
}

// Carregar arquivos
async function loadFiles() {
  try {
    console.log('üîÑ Tentando carregar arquivos...');
    addLog('üîÑ Carregando arquivos...');
    
    const response = await chrome.runtime.sendMessage({ action: 'fetch_files' });
    console.log('üìÇ Resposta do background:', response);
    
    if (response && response.error) {
      throw new Error(response.error);
    }
    
    const fileSelect = document.getElementById('vendzz-file-select');
    if (!fileSelect) {
      console.error('‚ùå Select de arquivos n√£o encontrado!');
      addLog('‚ùå Interface n√£o carregada corretamente');
      return;
    }
    
    fileSelect.innerHTML = '<option value="">Selecione um arquivo</option>';
    
    if (response && response.files && Array.isArray(response.files)) {
      response.files.forEach(file => {
        const option = document.createElement('option');
        option.value = file.id;
        option.textContent = `${file.quiz_title} (${file.total_phones} contatos)`;
        fileSelect.appendChild(option);
      });
      
      addLog(`üìÅ ${response.files.length} arquivos carregados`);
      console.log('‚úÖ Arquivos carregados com sucesso');
    } else {
      addLog('‚ö†Ô∏è Nenhum arquivo encontrado');
      console.log('‚ö†Ô∏è Resposta inv√°lida:', response);
    }
    
  } catch (error) {
    console.error('‚ùå Erro ao carregar arquivos:', error);
    addLog(`‚ùå Erro ao carregar arquivos: ${error.message}`);
  }
}

// Carregar arquivo selecionado
async function loadSelectedFile() {
  const fileId = document.getElementById('vendzz-file-select').value;
  
  if (!fileId) {
    currentContacts = [];
    updateContactsList();
    document.getElementById('vendzz-contacts-section').style.display = 'none';
    updateFileStatus('Nenhum');
    return;
  }

  try {
    addLog(`üîÑ Carregando contatos do arquivo...`);
    
    const response = await chrome.runtime.sendMessage({ 
      action: 'fetch_contacts',
      fileId: fileId
    });
    
    if (response.error) {
      throw new Error(response.error);
    }
    
    // Parse contacts se vier como string JSON
    let contacts = response.contacts || [];
    if (typeof contacts === 'string') {
      try {
        contacts = JSON.parse(contacts);
      } catch (e) {
        console.log('‚ùå Erro ao parsear contatos:', e);
        contacts = [];
      }
    }
    
    currentContacts = Array.isArray(contacts) ? contacts : [];
    selectedFile = fileId;
    
    updateContactsList();
    document.getElementById('vendzz-contacts-section').style.display = 'block';
    
    // Mostrar se√ß√£o de automa√ß√£o
    showAutomationSection();
    
    const fileName = document.getElementById('vendzz-file-select').selectedOptions[0].textContent;
    updateFileStatus(fileName);
    
    addLog(`üì± ${currentContacts.length} contatos carregados`);
    
    // Mostrar estat√≠sticas por status
    if (currentContacts.length > 0) {
      const completed = currentContacts.filter(c => c.isComplete).length;
      const abandoned = currentContacts.length - completed;
      addLog(`üìä Status: ${completed} completos, ${abandoned} abandonados`);
    }
    
  } catch (error) {
    addLog(`‚ùå Erro ao carregar contatos: ${error.message}`);
  }
}

// Atualizar lista de contatos
function updateContactsList() {
  const contactList = document.getElementById('vendzz-contact-list');
  const contactCount = document.getElementById('vendzz-contact-count');
  
  contactCount.textContent = currentContacts.length;
  
  if (currentContacts.length === 0) {
    contactList.innerHTML = '<div class="vendzz-contact-item">Nenhum contato</div>';
    return;
  }
  
  contactList.innerHTML = currentContacts.map(contact => `
    <div class="vendzz-contact-item" data-phone="${contact.phone}">
      <div class="vendzz-contact-header">
        <div class="vendzz-contact-phone">${contact.phone}</div>
        <div class="vendzz-contact-status ${contact.isComplete ? 'completed' : 'abandoned'}">
          ${contact.isComplete ? '‚úÖ Quiz Completo' : '‚è≥ Quiz Abandonado'}
        </div>
      </div>
      <div class="vendzz-contact-details">
        ${contact.nome ? `<div><strong>Nome:</strong> ${contact.nome}</div>` : ''}
        ${contact.email ? `<div><strong>Email:</strong> ${contact.email}</div>` : ''}
        ${contact.idade ? `<div><strong>Idade:</strong> ${contact.idade}</div>` : ''}
        ${contact.altura ? `<div><strong>Altura:</strong> ${contact.altura}</div>` : ''}
        ${contact.peso ? `<div><strong>Peso:</strong> ${contact.peso}</div>` : ''}
        <div><strong>Data:</strong> ${new Date(contact.submittedAt).toLocaleString('pt-BR')}</div>
        <div><strong>Conclus√£o:</strong> ${contact.completionPercentage}%</div>
      </div>
    </div>
  `).join('');
}

// Atualizar status de conex√£o
function updateConnectionStatus(text, className) {
  const statusElement = document.getElementById('vendzz-connection-status');
  statusElement.textContent = text;
  statusElement.className = `vendzz-status-value ${className}`;
}

// Atualizar status do arquivo
function updateFileStatus(text) {
  document.getElementById('vendzz-file-status').textContent = text;
}

// Adicionar log
function addLog(message) {
  const logContainer = document.getElementById('vendzz-log');
  const timestamp = new Date().toLocaleTimeString('pt-BR');
  
  const logItem = document.createElement('div');
  logItem.className = 'vendzz-log-item';
  logItem.textContent = `${timestamp} - ${message}`;
  
  logContainer.insertBefore(logItem, logContainer.firstChild);
  
  // Manter apenas os √∫ltimos 10 logs
  while (logContainer.children.length > 10) {
    logContainer.removeChild(logContainer.lastChild);
  }
  
  console.log(`üìù Vendzz Log: ${message}`);
}

// Listener para mensagens do background
chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
  if (request.action === 'refresh_data') {
    // Recarregar dados se necess√°rio
    if (selectedFile) {
      loadSelectedFile();
    }
  }
});

// Ajustar layout do WhatsApp para acomodar sidebar
function adjustWhatsAppLayout() {
  const style = document.createElement('style');
  style.textContent = `
    #main {
      margin-right: 300px !important;
    }
    
    @media (max-width: 1200px) {
      #main {
        margin-right: 0 !important;
      }
      .vendzz-sidebar {
        width: 280px !important;
      }
    }
  `;
  document.head.appendChild(style);
}

// Inicializa√ß√£o
async function init() {
  try {
    console.log('üîÑ Inicializando Vendzz WhatsApp Automation...');
    
    // Verificar se j√° existe sidebar
    if (document.getElementById('vendzz-sidebar')) {
      console.log('‚úÖ Sidebar j√° existe, abortando inicializa√ß√£o');
      return;
    }
    
    await waitForWhatsAppLoad();
    
    // Aguardar um pouco mais para garantir que tudo carregou
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    const sidebarElement = createSidebar();
    if (sidebarElement) {
      console.log('‚úÖ Sidebar criada com sucesso');
      adjustWhatsAppLayout();
      console.log('‚úÖ Layout do WhatsApp ajustado');
    } else {
      console.error('‚ùå Falha ao criar sidebar');
    }
    
    console.log('‚úÖ Vendzz WhatsApp Automation inicializado com sucesso');
    
  } catch (error) {
    console.error('‚ùå Erro na inicializa√ß√£o:', error);
    // Tentar novamente em 5 segundos
    setTimeout(init, 5000);
  }
}

// ==================== SISTEMA DE AUTOMA√á√ÉO DE MENSAGENS ====================

// Configura√ß√£o global da automa√ß√£o com sistema anti-ban
let automationConfig = {
  dateFilter: null,
  enableCompleted: true,
  enableAbandoned: false,
  completedMessages: [],
  abandonedMessages: [],
  messageDelay: 25000, // 25 segundos base
  randomDelayRange: 15000, // +/- 15 segundos aleat√≥rios
  dailyLimit: 50,
  hourlyLimit: 8,
  antiSpamMode: true,
  messageRotationIndex: { completed: 0, abandoned: 0 },
  sentInCurrentHour: 0,
  hourStartTime: Date.now()
};

// Atualizar configura√ß√£o da automa√ß√£o
function updateAutomationConfig() {
  automationConfig.dateFilter = document.getElementById('vendzz-date-filter').value || null;
  automationConfig.enableCompleted = document.getElementById('vendzz-enable-completed').checked;
  automationConfig.enableAbandoned = document.getElementById('vendzz-enable-abandoned').checked;
  
  // Coletar todas as mensagens rotativas
  automationConfig.completedMessages = [
    document.getElementById('vendzz-completed-message-1').value,
    document.getElementById('vendzz-completed-message-2').value,
    document.getElementById('vendzz-completed-message-3').value,
    document.getElementById('vendzz-completed-message-4').value
  ].filter(msg => msg.trim().length > 0);
  
  automationConfig.abandonedMessages = [
    document.getElementById('vendzz-abandoned-message-1').value,
    document.getElementById('vendzz-abandoned-message-2').value,
    document.getElementById('vendzz-abandoned-message-3').value,
    document.getElementById('vendzz-abandoned-message-4').value
  ].filter(msg => msg.trim().length > 0);
  
  automationConfig.messageDelay = parseInt(document.getElementById('vendzz-message-delay').value) * 1000;
  automationConfig.dailyLimit = parseInt(document.getElementById('vendzz-daily-limit').value);
  automationConfig.hourlyLimit = parseInt(document.getElementById('vendzz-hourly-limit').value);
  
  console.log('üîß Configura√ß√£o anti-ban atualizada:', {
    completedMessages: automationConfig.completedMessages.length,
    abandonedMessages: automationConfig.abandonedMessages.length,
    messageDelay: automationConfig.messageDelay,
    dailyLimit: automationConfig.dailyLimit,
    hourlyLimit: automationConfig.hourlyLimit
  });
}

// Preparar fila de automa√ß√£o com verifica√ß√£o de duplicatas
async function prepareAutomationQueue() {
  automationQueue = [];
  automationStats = { sent: 0, failed: 0, total: 0 };
  
  if (!currentContacts || currentContacts.length === 0) {
    addLog('‚ö†Ô∏è Nenhum contato carregado');
    return false;
  }
  
  // Primeiro filtro: data e status
  const filteredContacts = [];
  currentContacts.forEach(contact => {
    // Filtro por data
    if (automationConfig.dateFilter) {
      const contactDate = new Date(contact.submittedAt);
      const filterDate = new Date(automationConfig.dateFilter);
      if (contactDate < filterDate) {
        return; // Skip this contact
      }
    }
    
    // Filtro por status e sele√ß√£o de mensagem rotativa
    let message = null;
    if (contact.status === 'completed' && automationConfig.enableCompleted) {
      message = getRotativeMessage('completed');
    } else if (contact.status === 'abandoned' && automationConfig.enableAbandoned) {
      message = getRotativeMessage('abandoned');
    }
    
    if (message && contact.phone) {
      filteredContacts.push({ contact, message });
    }
  });
  
  if (filteredContacts.length === 0) {
    addLog('‚ö†Ô∏è Nenhum contato encontrado com os filtros aplicados');
    return false;
  }
  
  // Verificar duplicatas no backend
  const allPhones = filteredContacts.map(item => item.contact.phone);
  
  addLog('üîç Verificando n√∫meros j√° enviados...');
  
  try {
    const duplicateCheck = await apiRequest('/api/whatsapp-extension/check-sent', {
      method: 'POST',
      body: JSON.stringify({ phones: allPhones })
    });
    
    if (duplicateCheck.success) {
      const { newPhones, duplicatePhones, stats } = duplicateCheck;
      
      if (duplicatePhones.length > 0) {
        addLog(`‚ö†Ô∏è ${duplicatePhones.length} n√∫meros j√° enviados (ser√£o ignorados)`);
        console.log('üì± N√∫meros duplicados:', duplicatePhones);
      }
      
      // Filtrar apenas n√∫meros novos
      filteredContacts.forEach(({ contact, message }) => {
        if (newPhones.includes(contact.phone)) {
          // Personalizar mensagem com vari√°veis do contato
          const personalizedMessage = message
            .replace(/{nome}/g, contact.nome || 'Cliente')
            .replace(/{email}/g, contact.email || '')
            .replace(/{idade}/g, contact.idade || '')
            .replace(/{altura}/g, contact.altura || '')
            .replace(/{peso}/g, contact.peso || '');
          
          // Identificar varia√ß√£o da mensagem para logs
          const messageType = contact.status === 'completed' ? 'completed' : 'abandoned';
          const currentIndex = automationConfig.messageRotationIndex[messageType];
          const messageVariation = `Varia√ß√£o ${((currentIndex - 1 + (automationConfig[messageType + 'Messages'].length)) % automationConfig[messageType + 'Messages'].length) + 1}`;
          
          automationQueue.push({
            phone: contact.phone,
            message: personalizedMessage,
            messageVariation: messageVariation,
            contact: contact
          });
        }
      });
      
      if (stats.duplicates > 0) {
        addLog(`‚úÖ ${stats.new} n√∫meros novos, ${stats.duplicates} duplicatas removidas`);
      }
      
    } else {
      addLog('‚ö†Ô∏è Erro ao verificar duplicatas, continuando sem filtro');
      
      // Continuar sem verifica√ß√£o se der erro
      filteredContacts.forEach(({ contact, message }) => {
        const personalizedMessage = message
          .replace(/{nome}/g, contact.nome || 'Cliente')
          .replace(/{email}/g, contact.email || '')
          .replace(/{idade}/g, contact.idade || '')
          .replace(/{altura}/g, contact.altura || '')
          .replace(/{peso}/g, contact.peso || '');
        
        automationQueue.push({
          phone: contact.phone,
          message: personalizedMessage,
          contact: contact
        });
      });
    }
    
  } catch (error) {
    console.error('‚ùå Erro ao verificar duplicatas:', error);
    addLog('‚ö†Ô∏è Erro ao verificar duplicatas, continuando sem filtro');
    
    // Continuar sem verifica√ß√£o se der erro
    filteredContacts.forEach(({ contact, message }) => {
      const personalizedMessage = message
        .replace(/{nome}/g, contact.nome || 'Cliente')
        .replace(/{email}/g, contact.email || '')
        .replace(/{idade}/g, contact.idade || '')
        .replace(/{altura}/g, contact.altura || '')
        .replace(/{peso}/g, contact.peso || '');
      
      automationQueue.push({
        phone: contact.phone,
        message: personalizedMessage,
        contact: contact
      });
    });
  }
  
  // Aplicar limite di√°rio
  if (automationQueue.length > automationConfig.dailyLimit) {
    automationQueue = automationQueue.slice(0, automationConfig.dailyLimit);
    addLog(`‚ö†Ô∏è Limitado a ${automationConfig.dailyLimit} mensagens por dia`);
  }
  
  automationStats.total = automationQueue.length;
  updateAutomationStats();
  
  addLog(`üìã Fila preparada: ${automationQueue.length} mensagens`);
  return automationQueue.length > 0;
}

// Iniciar automa√ß√£o
async function startAutomation() {
  if (automationActive) {
    addLog('‚ö†Ô∏è Automa√ß√£o j√° est√° ativa');
    return;
  }
  
  // Atualizar configura√ß√£o
  updateAutomationConfig();
  
  // Preparar fila (agora √© ass√≠ncrona)
  const hasMessages = await prepareAutomationQueue();
  if (!hasMessages) {
    addLog('‚ùå N√£o h√° mensagens para enviar');
    return;
  }
  
  automationActive = true;
  currentlyProcessing = false;
  
  // Atualizar interface
  document.getElementById('vendzz-start-automation').style.display = 'none';
  document.getElementById('vendzz-stop-automation').style.display = 'block';
  document.getElementById('vendzz-automation-stats').style.display = 'block';
  
  addLog(`üöÄ Automa√ß√£o iniciada: ${automationQueue.length} mensagens`);
  
  // Iniciar processamento
  processAutomationQueue();
}

// Parar automa√ß√£o
function stopAutomation() {
  if (!automationActive) {
    return;
  }
  
  automationActive = false;
  currentlyProcessing = false;
  
  // Atualizar interface
  document.getElementById('vendzz-start-automation').style.display = 'block';
  document.getElementById('vendzz-stop-automation').style.display = 'none';
  
  addLog('‚èπÔ∏è Automa√ß√£o pausada');
}

// Processar fila de automa√ß√£o
async function processAutomationQueue() {
  if (!automationActive || currentlyProcessing) {
    return;
  }
  
  currentlyProcessing = true;
  
  while (automationActive && automationQueue.length > 0) {
    // Verificar limites anti-ban antes de cada envio
    const antiBanCheck = checkAntiBanLimits();
    if (!antiBanCheck.allowed) {
      addLog(`üö´ ${antiBanCheck.reason} - Pausando automa√ß√£o`);
      stopAutomation();
      break;
    }
    
    const item = automationQueue.shift();
    
    try {
      addLog(`üì§ Enviando para ${item.phone}... (${item.messageVariation})`);
      
      // Enviar mensagem
      const success = await sendWhatsAppMessage(item.phone, item.message);
      
      if (success) {
        automationStats.sent++;
        incrementSentCounter(); // Incrementar contador anti-ban
        addLog(`‚úÖ Enviado para ${item.phone}`);
      } else {
        automationStats.failed++;
        addLog(`‚ùå Falha ao enviar para ${item.phone}`);
      }
      
      updateAutomationStats();
      
      // Aguardar delay anti-ban randomizado antes da pr√≥xima mensagem
      if (automationQueue.length > 0 && automationActive) {
        const delay = calculateAntiBanDelay();
        addLog(`‚è±Ô∏è Aguardando ${Math.round(delay / 1000)}s (anti-ban 2025)...`);
        await new Promise(resolve => setTimeout(resolve, delay));
      }
      
    } catch (error) {
      automationStats.failed++;
      addLog(`‚ùå Erro ao enviar para ${item.phone}: ${error.message}`);
      updateAutomationStats();
    }
  }
  
  currentlyProcessing = false;
  
  if (automationActive && automationQueue.length === 0) {
    stopAutomation();
    addLog(`üéâ Automa√ß√£o conclu√≠da: ${automationStats.sent} enviadas, ${automationStats.failed} falhas`);
  }
}

// Enviar mensagem pelo WhatsApp
async function sendWhatsAppMessage(phone, message) {
  console.log(`üì§ Iniciando envio para ${phone}...`);
  
  try {
    // Validar telefone antes de tentar enviar
    const validPhone = validateAndFormatPhone(phone);
    if (!validPhone) {
      throw new Error(`Telefone inv√°lido: ${phone}`);
    }
    
    console.log(`üì± Buscando conversa para ${phone}...`);
    
    // Buscar ou abrir conversa sem recarregar p√°gina
    const searchResult = await searchContact(phone);
    if (!searchResult) {
      throw new Error('N√£o foi poss√≠vel abrir a conversa no WhatsApp');
    }
    
    console.log(`‚úÖ Conversa aberta para ${phone}`);
    
    // Aguardar a conversa carregar completamente com delay maior
    console.log('‚è±Ô∏è Aguardando conversa carregar...');
    await new Promise(resolve => setTimeout(resolve, 4000));
    
    // Aguardar campo de mensagem com timeout robusto
    const messageInput = await waitForMessageInput(8000);
    if (!messageInput) {
      throw new Error('Campo de mensagem n√£o encontrado ap√≥s 8 segundos');
    }
    
    console.log(`üí¨ Inserindo mensagem: "${message.substring(0, 50)}..."`);
    
    // Focar no campo com m√∫ltiplas tentativas
    for (let i = 0; i < 3; i++) {
      messageInput.focus();
      messageInput.click();
      await new Promise(resolve => setTimeout(resolve, 500));
      
      if (document.activeElement === messageInput) {
        console.log(`‚úÖ Campo focado na tentativa ${i + 1}`);
        break;
      }
    }
    
    // Limpar campo completamente
    messageInput.innerHTML = '';
    messageInput.innerText = '';
    messageInput.textContent = '';
    await new Promise(resolve => setTimeout(resolve, 300));
    
    // Inserir mensagem de forma mais robusta
    messageInput.innerText = message;
    
    // Disparar eventos necess√°rios com delay
    const events = ['input', 'keyup', 'change', 'blur', 'focus'];
    for (const eventType of events) {
      const event = new Event(eventType, { bubbles: true });
      messageInput.dispatchEvent(event);
      await new Promise(resolve => setTimeout(resolve, 100));
    }
    
    console.log('‚è±Ô∏è Aguardando WhatsApp processar mensagem...');
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    // Aguardar bot√£o de enviar ficar ativo
    const sendButton = await waitForSendButton(5000);
    if (!sendButton) {
      throw new Error('Bot√£o de enviar n√£o encontrado ap√≥s 5 segundos');
    }
    
    console.log(`üöÄ Enviando mensagem...`);
    
    // Clicar no bot√£o de enviar com delay
    sendButton.click();
    
    // Aguardar confirma√ß√£o de envio com delay maior
    console.log('‚è±Ô∏è Aguardando confirma√ß√£o de envio...');
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    // Verificar se a mensagem foi enviada
    const messageSent = await verifyMessageSent();
    
    if (messageSent) {
      console.log(`‚úÖ Mensagem enviada com sucesso para ${phone}`);
      return true;
    } else {
      console.log(`‚ö†Ô∏è Mensagem enviada mas confirma√ß√£o n√£o detectada para ${phone}`);
      return true; // Assumir sucesso se n√£o houver erro expl√≠cito
    }
    
  } catch (error) {
    console.error(`‚ùå Erro ao enviar mensagem para ${phone}:`, error);
    return false;
  }
}

// Aguardar bot√£o de enviar ficar dispon√≠vel
async function waitForSendButton(timeout = 5000) {
  const sendSelectors = [
    '[data-testid="send"]',
    'button[aria-label*="Send"]',
    'button[aria-label*="Enviar"]',
    'span[data-testid="send"]',
    'button[data-tab="11"]',
    '[data-icon="send"]',
    'span[data-icon="send"]'
  ];
  
  const startTime = Date.now();
  
  while (Date.now() - startTime < timeout) {
    for (const selector of sendSelectors) {
      const button = document.querySelector(selector);
      if (button && !button.disabled && button.offsetParent !== null) {
        console.log(`‚úÖ Bot√£o de enviar encontrado e ativo: ${selector}`);
        return button;
      }
    }
    await new Promise(resolve => setTimeout(resolve, 200));
  }
  
  console.log(`‚ùå Bot√£o de enviar n√£o encontrado ap√≥s ${timeout}ms`);
  return null;
}

// Verificar se mensagem foi enviada
async function verifyMessageSent(timeout = 3000) {
  const sentIndicators = [
    '[data-testid="msg-check"]',
    '[data-icon="msg-check"]',
    '[data-icon="msg-dblcheck"]',
    '.message-out',
    '[data-testid="tail-out"]',
    '.msg-check'
  ];
  
  const startTime = Date.now();
<517 linhas n√£o apresentadas>
‚ùå API Error for /api/auth/verify: Error: HTTP 502: Bad Gateway
Uncaught SyntaxError: Identifier 'automationConfig' has already been declared
‚ùå API Error for /api/auth/verify: Error: HTTP 502: Bad Gateway
‚ùå Erro na resposta: [object Object]
Uncaught (in promise) Error: Could not establish connection. Receiving end does not exist.
