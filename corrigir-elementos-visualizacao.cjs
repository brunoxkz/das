#!/usr/bin/env node

/**
 * CORRE√á√ÉO COMPLETA - ELEMENTOS DE VISUALIZA√á√ÉO
 * ==============================================
 * 
 * Corrige os problemas que est√£o causando tela branca nos elementos
 * gr√°fico e m√©trica, incluindo interpola√ß√µes duplas e tags desbalanceadas
 */

const fs = require('fs');

function corrigirElementosVisualizacao() {
  console.log('üîß CORRE√á√ÉO COMPLETA - ELEMENTOS DE VISUALIZA√á√ÉO');
  console.log('================================================\n');

  let content = fs.readFileSync('client/src/components/page-editor-horizontal.tsx', 'utf8');
  let mudancas = 0;

  // 1. Corrigir interpola√ß√µes duplas no gr√°fico
  console.log('1. Corrigindo interpola√ß√µes duplas...');
  
  // Primeira interpola√ß√£o dupla - width e height
  const regex1 = /style=\{\{\s*width:\s*element\.chartWidth\s*\|\|\s*"100%",\s*height:\s*element\.chartHeight\s*\|\|\s*"280px"\s*\}\}/g;
  if (regex1.test(content)) {
    content = content.replace(regex1, `style={{
              width: element.chartWidth || "100%",
              height: element.chartHeight || "280px"
            }}`);
    mudancas++;
    console.log('   ‚úÖ Corrigida interpola√ß√£o dupla de width/height');
  }

  // Segunda interpola√ß√£o dupla - backgroundColor no gr√°fico
  const regex2 = /style=\{\{\s*backgroundColor:\s*item\.color\s*\|\|\s*"#10b981"\s*\}\}/g;
  if (regex2.test(content)) {
    content = content.replace(regex2, `style={{
                      backgroundColor: item.color || "#10b981"
                    }}`);
    mudancas++;
    console.log('   ‚úÖ Corrigida interpola√ß√£o dupla de backgroundColor');
  }

  // 2. Verificar e corrigir tags desbalanceadas
  console.log('\n2. Verificando tags desbalanceadas...');
  
  // Encontrar tags n√£o fechadas mais comuns
  const tagsProblematicas = [
    { tag: 'div', regex: /<div(?:\s[^>]*)?>(?![^<]*<\/div>)/g },
    { tag: 'span', regex: /<span(?:\s[^>]*)?>(?![^<]*<\/span>)/g },
    { tag: 'Button', regex: /<Button(?:\s[^>]*)?>(?![^<]*<\/Button>)/g },
    { tag: 'Label', regex: /<Label(?:\s[^>]*)?>(?![^<]*<\/Label>)/g },
    { tag: 'Input', regex: /<Input(?:\s[^>]*)?(?:\s\/>|>(?![^<]*<\/Input>))/g }
  ];

  tagsProblematicas.forEach(({ tag, regex }) => {
    const matches = content.match(regex);
    if (matches) {
      console.log(`   ‚ùå Encontradas ${matches.length} tags ${tag} possivelmente n√£o fechadas`);
    }
  });

  // 3. Corrigir problemas espec√≠ficos conhecidos
  console.log('\n3. Corrigindo problemas espec√≠ficos...');
  
  // Corrigir auto-closing tags que podem estar mal formadas
  const autoClosingFixes = [
    { 
      problema: /<Input([^>]*?)(?<!\/)\s*>/g,
      solucao: '<Input$1 />'
    },
    {
      problema: /<br(?:\s[^>]*)?>(?!\s*\/)/g,
      solucao: '<br />'
    }
  ];

  autoClosingFixes.forEach(({ problema, solucao }) => {
    const matches = content.match(problema);
    if (matches) {
      content = content.replace(problema, solucao);
      mudancas++;
      console.log(`   ‚úÖ Corrigidas ${matches.length} tags auto-fechadas`);
    }
  });

  // 4. Verificar e corrigir chaves JSX desbalanceadas
  console.log('\n4. Verificando chaves JSX...');
  
  const openBraces = (content.match(/\{/g) || []).length;
  const closeBraces = (content.match(/\}/g) || []).length;
  
  console.log(`   Chaves abertas: ${openBraces}`);
  console.log(`   Chaves fechadas: ${closeBraces}`);
  console.log(`   Diferen√ßa: ${Math.abs(openBraces - closeBraces)}`);

  // 5. Salvar as mudan√ßas
  if (mudancas > 0) {
    fs.writeFileSync('client/src/components/page-editor-horizontal.tsx', content);
    console.log(`\n‚úÖ ${mudancas} corre√ß√µes aplicadas com sucesso!`);
  } else {
    console.log('\n‚úÖ Nenhuma corre√ß√£o necess√°ria');
  }

  // 6. Verifica√ß√£o final
  console.log('\n6. Verifica√ß√£o final...');
  
  const finalContent = fs.readFileSync('client/src/components/page-editor-horizontal.tsx', 'utf8');
  
  // Verificar se Select est√° importado
  const selectImported = finalContent.includes('import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue }');
  console.log(`   Select importado: ${selectImported ? '‚úÖ' : '‚ùå'}`);
  
  // Verificar interpola√ß√µes duplas restantes
  const doubleInterpolations = finalContent.match(/style=\{\{[^}]+\}\}/g);
  console.log(`   Interpola√ß√µes duplas restantes: ${doubleInterpolations ? doubleInterpolations.length : 0}`);
  
  // Verificar casos dos elementos
  const chartCase = finalContent.includes('case "chart":');
  const metricsCase = finalContent.includes('case "metrics":');
  console.log(`   Caso gr√°fico: ${chartCase ? '‚úÖ' : '‚ùå'}`);
  console.log(`   Caso m√©trica: ${metricsCase ? '‚úÖ' : '‚ùå'}`);

  console.log('\nüéØ CORRE√á√ÉO CONCLU√çDA!');
  console.log('======================');
  
  if (selectImported && chartCase && metricsCase && (!doubleInterpolations || doubleInterpolations.length === 0)) {
    console.log('‚úÖ Elementos de visualiza√ß√£o devem funcionar corretamente agora');
  } else {
    console.log('‚ö†Ô∏è  Alguns problemas podem persistir, verifique manualmente');
  }
}

corrigirElementosVisualizacao();